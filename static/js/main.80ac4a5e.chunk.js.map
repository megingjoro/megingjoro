{"version":3,"sources":["utils/index.js","constants.js","components/icon.js","components/box.js","components/nodeEmpty.js","components/nodeStats.js","components/table.js","components/nodePools.js","components/nodeWallet.js","components/nodeChart.js","components/nodeHistory.js","components/nodeManualTransaction.js","components/nodeTrade.js","components/node.js","components/modalConfigureAddress.js","App.js","index.js"],"names":["state","stateListeners","useGlobalState","key","alt","useState","value","setValue","useEffect","onChange","push","splice","indexOf","forEach","fn","midgardRequest","network","path","apiRequest","thornodeRequest","api","fetch","then","res","a","status","Error","text","json","merge","o1","o2","Object","assign","padLeft","num","len","ch","numText","toString","i","length","formatAddress","address","slice","formatMoney","n","parseFloat","intp","Math","floor","toFixed","replace","decp","split","formatDate","dateString","d","Date","getFullYear","getMonth","getDate","join","formatTime","getHours","getMinutes","getSeconds","isValidThorAddress","match","explorerTransactionUrl","txId","explorerPoolUrl","pool","thorchainTransaction","wallet","action","params","type","memo","asset","recipient","amount","Promise","resolve","reject","window","xfi","thorchain","request","method","from","decimals","err","result","thorchainTransactionXdefi","connector","WalletConnect","bridge","qrcodeModal","QRCodeModal","send","message","denom","toLowerCase","String","from_address","to_address","coins","signer","r","account","tx","messages","rawJsonMessage","stringify","fee","gas","amounts","chainId","sequence","accountNumber","account_number","sendCustomRequest","jsonrpc","transaction","signedTx","headers","body","submitResult","logs","raw_log","txhash","connected","createSession","on","error","payload","thorchainTransactionWalletConnect","globalState","stableByNetwork","testnet","mainnet","defaultWorksapces","JSON","name","root","size","data","defaultWallets","selected","watched","Icon","props","className","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","Box","title","updateWorkspace","children","right","onSelectType","node","onSplit","direction","top","bottom","left","onClick","bind","NodeEmpty","e","preventDefault","NodeStats","stats","parseInt","runeDepth","pow","runePriceUSD","swapVolume","swapCount24h","dailyActiveUsers","swapCount30d","monthlyActiveUsers","swapCount","uniqueSwapperCount","impermanentLossProtectionPaid","Table","rows","defaultSort","onSortChange","propsFilters","filters","propsOnFilterChange","onFilterChange","setFilters","id","sort","setSort","headerId","newValue","target","newFilters","onSort","newSort","filteredRows","filter","sortProp","b","v1","v2","reverse","map","h","class","style","v","NodePools","isSettingsOpen","setIsSettingsOpen","pools","onDataChange","onColumnChange","columns","hiddenColumns","c","checked","onToggleSettings","p","href","assetValue","price","priceValue","apy","apyValue","depth","depthValue","volume","volumeValue","includes","NodeWallet","addressPools","setAddressPools","addressBalances","setAddressBalances","update","handle","setInterval","clearInterval","balances","assetName","toUpperCase","assetPool","find","stablePool","depthAsset","depthRune","valueValue","assetAmount","assetAmountValue","assetRemoved","runeAmount","runeRemoved","start","pp","amountAsset","assetAdded","assetWithdrawn","amountRune","runeAdded","runeWithdrawn","liquidityUnits","units","assetRemovedValue","runeAmountValue","runeRemovedValue","dateFirstAdded","NodeChart","chartRef","useRef","setAsset","range","setRange","prices","setPrices","loadData","queryMap","intervals","assetPriceUSD","assetPrice","el","current","lastChild","removeChild","rect","getBoundingClientRect","chart","createChart","width","height","layout","backgroundColor","textColor","fontSize","fontFamily","vertLines","color","visible","horzLines","timeScale","fixLeftEdge","timeVisible","addAreaSeries","bottomColor","lineColor","setData","time","startTime","setVisibleLogicalRange","to","display","flexDirection","padding","newAsset","marginRight","newRange","flex","ref","NodeHistory","addressActions","setAddressActions","actions","asset2","in","out","transactionId","txID","date","timeValue","amountValue","NodeManualTransaction","setError","isLoading","setIsLoading","setTransactionId","percent","options","setOptions","computeMemo","limit","assym","onOptionChange","newOptions","Number","isNaN","console","onSubmit","placeholder","min","max","step","disabled","NodeTrade","buyOrSell","assetSynthName","undefined","chain","symbol","ticker","Node","nodeRef","isDragging","setIsDragging","onMouseMove","nodes","querySelectorAll","percentWidth","clientX","clientY","round","flexBasis","concat","onMouseDown","onMouseUp","removeEventListener","addEventListener","renderNode","walletconnectAttempt","ModalConfigureAddress","onClose","wallets","setWallets","newWatchedAddress","setNewWatchedAddress","newWatchedLabel","setNewWatchedLabel","setup","w","alert","newWallet","killSession","onSelect","onCopy","stopPropagation","navigator","clipboard","writeText","onRemove","index","_","handler","accounts","log","label","startsWith","gotPoolsFromMidgard","nodeSiblingNameMap","WorkspacesNav","workspaces","setWorkspaces","selectedWorkspaceIndex","setSelectedWorkspaceIndex","newName","prompt","localStorage","App","modal","setModal","setPools","setStats","parse","selectedWorkspace","updated","refresh","thornodePools","runePrice","balance_asset","balance_rune","reduce","ps","pool_units","values","midgardPools","volume24h","poolAPY","catch","parent","leaf","tail","globalWorkspaces","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80ac4a5e.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"@walletconnect/qrcode-modal\";\nimport stringify from \"json-stable-stringify\";\n\nconst state = {};\nconst stateListeners = [];\nwindow.globalState = state;\n\nexport function useGlobalState(key, alt) {\n  const [value, setValue] = useState(state[key] || alt);\n  useEffect(() => {\n    const onChange = () => {\n      if (value !== state[key] || alt) {\n        setValue(state[key] || alt);\n      }\n    };\n    stateListeners.push(onChange);\n    return () => stateListeners.splice(stateListeners.indexOf(onChange), 1);\n  }, []);\n  const onSet = (value) => {\n    state[key] = value;\n    stateListeners.forEach((fn) => fn());\n  };\n  return [value, onSet];\n}\n\nexport function midgardRequest(network, path) {\n  return apiRequest(\"midgard\", network, \"/v2\" + path);\n}\n\nexport function thornodeRequest(network, path) {\n  return apiRequest(\"thornode\", network, path);\n}\n\nexport function apiRequest(api, network, path) {\n  return fetch(\n    `https://${\n      network === \"testnet\" ? \"testnet.\" : \"\"\n    }${api}.thorchain.info${path}`\n  ).then(async (res) => {\n    if (res.status !== 200) {\n      throw new Error(\n        \"Non 2xx response code: \" + res.status + \": \" + (await res.text())\n      );\n    }\n    return res.json();\n  });\n}\n\nexport function merge(o1, o2) {\n  return Object.assign(Object.assign({}, o1), o2);\n}\n\nexport function sortBy(fn, vs) {\n  return vs.sort((a, b) => {\n    const v1 = fn(a);\n    const v2 = fn(b);\n    return typeof v1 === \"number\" ? v1 - v2 : v1 > v2;\n  });\n}\n\nexport function padLeft(num, len, ch) {\n  var numText = num.toString();\n  for (var i = numText.length; i < len; i++) {\n    numText = ch + numText;\n  }\n  return numText;\n}\n\nexport function formatAddress(address) {\n  return address.slice(0, 8) + \"…\" + address.slice(-4);\n}\n\nexport function formatDecimal(val, precision) {\n  if (val === \"n/a\" || val === \"-\") return val;\n  val = parseFloat(val);\n  if (Number.isNaN(val)) val = 0;\n  return val.toFixed(precision);\n}\n\nexport function formatMoney(value, n = 0) {\n  value = parseFloat(value);\n  const intp = Math.floor(value)\n    .toFixed(0)\n    .replace(/(\\d)(?=(\\d{3})+$)/g, \"$1 \");\n  const decp = n > 0 ? \".\" + value.toFixed(n).split(\".\")[1] : \"\";\n  return intp + decp;\n}\n\nexport function formatDate(dateString) {\n  const d = new Date(dateString);\n  return [\n    d.getFullYear(),\n    padLeft(d.getMonth() - 1, 2, \"0\"),\n    padLeft(d.getDate(), 2, \"0\"),\n  ].join(\"-\");\n}\n\nexport function formatTime(dateString) {\n  const d = new Date(dateString);\n  return [\n    padLeft(d.getHours(), 2, \"0\"),\n    padLeft(d.getMinutes(), 2, \"0\"),\n    padLeft(d.getSeconds(), 2, \"0\"),\n  ].join(\":\");\n}\n\nexport function formatDatetime(dateString) {\n  const d = new Date(dateString);\n  return formatDate(d) + \" \" + formatTime(d);\n}\n\nexport function classForNumber(n) {\n  return n < 0 ? \"text-red\" : n > 0 ? \"text-green\" : \"\";\n}\n\nexport function isValidThorAddress(address) {\n  if (address.indexOf(\"thor\") === 0) {\n    return address.length === 43 && address.match(/^thor[a-z0-9]{39}$/);\n  } else if (address.indexOf(\"tthor\") === 0) {\n    return address.length === 44 && address.match(/^tthor[a-z0-9]{39}$/);\n  } else {\n    return false;\n  }\n}\n\nexport function explorerTransactionUrl(network, txId) {\n  if (!txId) return \"#\";\n  return `https://${\n    network === \"testnet\" ? \"testnet.\" : \"\"\n  }thorchain.net/#/txs/${txId}`;\n}\n\nexport function explorerPoolUrl(network, pool) {\n  if (!pool) return \"#\";\n  return `https://${\n    network === \"testnet\" ? \"testnet.\" : \"\"\n  }thorchain.net/#/pools/${pool}`;\n}\n\nexport function thorchainTransaction(wallet, action, params) {\n  if (wallet.type === \"xdefi\") {\n    return thorchainTransactionXdefi(wallet, action, params);\n  }\n  if (wallet.type === \"walletconnect\") {\n    return thorchainTransactionWalletConnect(wallet, action, params);\n  }\n  throw new Error(\n    \"Connected wallet can't send transactions, try connecting XDefi or WalletConnect\"\n  );\n}\n\nfunction thorchainTransactionXdefi(\n  wallet,\n  action,\n  { memo, asset, recipient, amount }\n) {\n  return new Promise((resolve, reject) => {\n    if (!window.xfi || !window.xfi.thorchain || !wallet.address) {\n      return reject(new Error(\"xdefi wallet not connected\"));\n    }\n    /*\n    const handle = setTimeout(() => {\n      reject(new Error(\"transaction timeout\"));\n    }, 60000);\n    */\n    window.xfi.thorchain.request(\n      {\n        method: action,\n        params: [\n          {\n            from: wallet.address,\n            memo,\n            asset,\n            recipient,\n            amount: { amount: amount, decimals: 8 },\n          },\n        ],\n      },\n      (err, result) => {\n        // clearTimeout(handle);\n        if (err) return reject(err);\n        resolve(result);\n      }\n    );\n  });\n}\n\nfunction thorchainTransactionWalletConnect(\n  wallet,\n  action,\n  { memo, asset, recipient, amount }\n) {\n  return new Promise((resolve, reject) => {\n    const connector = new WalletConnect({\n      bridge: \"https://bridge.walletconnect.org\",\n      qrcodeModal: QRCodeModal,\n    });\n    async function send() {\n      try {\n        // Build message\n        let message = {\n          type: \"thorchain/MsgSend\",\n          value: {\n            amount: [\n              {\n                denom: (asset || \"rune\").toLowerCase(),\n                amount: String(amount),\n              },\n            ],\n            from_address: wallet.address,\n            to_address: recipient,\n          },\n        };\n        if (action === \"deposit\") {\n          message = {\n            type: \"thorchain/MsgDeposit\",\n            value: {\n              coins: [{ asset: asset || \"THOR.RUNE\", amount: String(amount) }],\n              memo: memo,\n              signer: wallet.address,\n            },\n          };\n        }\n\n        // Get account info for tx building\n        const result = await fetch(\n          \"https://thornode.thorchain.info/auth/accounts/\" + wallet.address\n        ).then((r) => r.json());\n        const account = result.result.value;\n\n        // Sign transaction\n        const tx = {\n          messages: [\n            {\n              rawJsonMessage: {\n                type: message.type,\n                value: stringify(message.value),\n              },\n            },\n          ],\n          fee: { gas: \"20000000\", amounts: [] },\n          memo: \"\",\n          chainId: \"thorchain\",\n          sequence: account.sequence,\n          accountNumber: account.account_number,\n        };\n        const signedTx = await connector.sendCustomRequest({\n          jsonrpc: \"2.0\",\n          method: \"trust_signTransaction\",\n          params: [{ network: 931, transaction: stringify(tx) }],\n        });\n\n        const submitResult = await fetch(\n          \"https://thornode.thorchain.info/txs\",\n          {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: signedTx,\n          }\n        ).then((r) => r.json());\n        if (!submitResult.logs) {\n          return reject(\n            new Error(\"Transaction failed: \" + submitResult.raw_log)\n          );\n        }\n        resolve(submitResult.txhash);\n      } catch (err) {\n        reject(err);\n      }\n    }\n    if (connector.connected) {\n      send();\n    } else {\n      connector.createSession();\n      connector.on(\"connect\", async (error, payload) => {\n        if (error) return reject(error);\n        send();\n      });\n    }\n  });\n}\n","export const NODE_TYPES = {\n  empty: { id: \"empty\", name: \"empty\" },\n  stats: { id: \"stats\", name: \"stats\" },\n  pools: { id: \"pools\", name: \"pools\" },\n  chart: { id: \"chart\", name: \"chart\" },\n  wallet: { id: \"wallet\", name: \"wallet\" },\n  history: { id: \"history\", name: \"history\" },\n  manualTransaction: { id: \"manualTransaction\", name: \"manual transaction\" },\n};\n\nexport const stableByNetwork = {\n  testnet: 'BNB.BUSD-74E',\n  mainnet: 'BNB.BUSD-BD1',\n};\n\nexport const defaultWorksapces = JSON.stringify([\n  {\n    name: \"default\",\n    root: { type: \"node\", size: 100, data: { type: \"empty\" } },\n  },\n]);\n\nexport const defaultWallets = {\n  selected: null,\n  connected: null,\n  watched: [],\n};\n","import React from \"react\";\n\nfunction Icon(props) {\n  const className = \"icon h-6 w-6\";\n  switch (props.name) {\n    case \"plus\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\"\n          />\n        </svg>\n      );\n    case \"trash\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"\n          />\n        </svg>\n      );\n    case \"edit\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"\n          />\n        </svg>\n      );\n    case \"save\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M17 16v2a2 2 0 01-2 2H5a2 2 0 01-2-2v-7a2 2 0 012-2h2m3-4H9a2 2 0 00-2 2v7a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-1m-1 4l-3 3m0 0l-3-3m3 3V3\"\n          />\n        </svg>\n      );\n    case \"times\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M6 18L18 6M6 6l12 12\"\n          />\n        </svg>\n      );\n    case \"arrows-alt-v\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4\"\n          />\n        </svg>\n      );\n    case \"arrows-alt-h\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4\"\n          />\n        </svg>\n      );\n    case \"chevron-up\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M5 15l7-7 7 7\"\n          />\n        </svg>\n      );\n    case \"chevron-down\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M19 9l-7 7-7-7\"\n          />\n        </svg>\n      );\n    case \"cog\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n          className={className}\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"\n          />\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"\n          />\n        </svg>\n      );\n    default:\n      throw new Error(\"Unknow icon name: \" + props.name);\n  }\n}\n\nexport default Icon;\n","import React from \"react\";\n\nimport Icon from \"./icon\";\n\nexport default function Box({ title, path, updateWorkspace, children, right = null }) {\n  function onSelectType() {\n    updateWorkspace(\n      (node) => Object.assign(node, { data: { type: \"empty\" } }),\n      path\n    );\n  }\n\n  function onClose() {\n    if (path.length === 0) {\n      onSelectType();\n      return;\n    }\n    updateWorkspace(() => null, path);\n  }\n\n  function onSplit(direction) {\n    updateWorkspace((node) => {\n      if (direction === \"vertically\") {\n        return {\n          type: \"vsplit\",\n          size: node.size,\n          top: Object.assign(node, { size: 50 }),\n          bottom: { type: \"node\", size: 50, data: { type: \"empty\" } },\n        };\n      } else {\n        return {\n          type: \"hsplit\",\n          size: node.size,\n          left: Object.assign(node, { size: 50 }),\n          right: { type: \"node\", size: 50, data: { type: \"empty\" } },\n        };\n      }\n    }, path);\n  }\n\n  return (\n    <div className=\"box\">\n      <div className=\"box-header\">\n        <span\n          className=\"box-header-title\"\n          title=\"Change panel type\"\n          onClick={onSelectType}\n        >\n          {title}\n        </span>\n        <div className=\"box-header-icon\" title=\"Close\" onClick={onClose}>\n          <Icon name=\"times\" />\n        </div>\n        <div\n          className=\"box-header-icon\"\n          title=\"Split Horizontally\"\n          onClick={onSplit.bind(null, \"horizontally\")}\n        >\n          <Icon name=\"arrows-alt-h\" />\n        </div>\n        <div\n          className=\"box-header-icon\"\n          title=\"Split Vertically\"\n          onClick={onSplit.bind(null, \"vertically\")}\n        >\n          <Icon name=\"arrows-alt-v\" />\n        </div>\n        {right}\n      </div>\n      <div className=\"box-contents\">{children}</div>\n    </div>\n  );\n}\n","import { merge, useGlobalState } from \"../utils\";\nimport Box from \"./box\";\n\nexport default function NodeEmpty({ path, updateWorkspace }) {\n  const [{ selected: wallet }] = useGlobalState(\"wallets\", {});\n  const network = wallet ? wallet.network : \"mainnet\";\n\n  function onSelectType(type, e) {\n    e.preventDefault();\n    let update = (node) => merge(node, { data: { type: type } });\n    updateWorkspace(update, path);\n  }\n\n  return (\n    <Box title=\"Empty\" path={path} updateWorkspace={updateWorkspace}>\n      <div>\n        <br />\n        <p className=\"text-center\">select a panel type:</p>\n        <div className=\"node-empty\">\n          <button className=\"button\" onClick={onSelectType.bind(null, \"stats\")}>\n            <strong>stats.</strong>\n            <span>global thorchain stats.</span>\n          </button>\n          <button className=\"button\" onClick={onSelectType.bind(null, \"pools\")}>\n            <strong>pools.</strong>\n            <span>list of thorchain pools.</span>\n          </button>\n          <button\n            className=\"button\"\n            onClick={onSelectType.bind(null, \"wallet\")}\n          >\n            <strong>wallet.</strong>\n            <span>your rune, synth and lp balances.</span>\n          </button>\n          <button className=\"button\" onClick={onSelectType.bind(null, \"chart\")}>\n            <strong>chart.</strong>\n            <span>price chart for a pool.</span>\n          </button>\n          <button\n            className=\"button\"\n            onClick={onSelectType.bind(null, \"history\")}\n          >\n            <strong>history.</strong>\n            <span>action history for current address.</span>\n          </button>\n          <button\n            className=\"button\"\n            onClick={onSelectType.bind(null, \"manualTransaction\")}\n          >\n            <strong>manual transaction.</strong>\n            <span>send in a manual thorchain transaction.</span>\n          </button>\n          {network === \"testnet\" ? (\n            <button\n              className=\"button\"\n              onClick={onSelectType.bind(null, \"trade\")}\n            >\n              <strong>trade.</strong>\n              <span>buy/sell assets using synthetics.</span>\n            </button>\n          ) : null}\n        </div>\n      </div>\n    </Box>\n  );\n}\n","import { formatMoney, useGlobalState } from \"../utils\";\nimport Box from \"./box\";\n\nexport default function NodeStats({ path, updateWorkspace }) {\n  const [stats] = useGlobalState(\"stats\");\n  return (\n    <Box title=\"Stats\" path={path} updateWorkspace={updateWorkspace}>\n      {stats ? (\n        <div className=\"node-empty\">\n          <button className=\"button\">\n            <strong className=\"text-primary\">\n              $\n              {formatMoney(\n                ((parseInt(stats.runeDepth) * 2) / Math.pow(10, 8)) *\n                  parseFloat(stats.runePriceUSD)\n              )}\n            </strong>\n            <span>total liquidity</span>\n          </button>\n          <button className=\"button\">\n            <strong>\n              $\n              {formatMoney(\n                (parseInt(stats.swapVolume) / Math.pow(10, 8)) *\n                  parseFloat(stats.runePriceUSD)\n              )}\n            </strong>\n            <span>total swap volume</span>\n          </button>\n          <button className=\"button\">\n            <strong>{formatMoney(stats.swapCount24h)}</strong>\n            <span>24h swap count</span>\n          </button>\n          <button className=\"button\">\n            <strong>{formatMoney(stats.dailyActiveUsers)}</strong>\n            <span>24h active users</span>\n          </button>\n          <button className=\"button\">\n            <strong>{formatMoney(stats.swapCount30d)}</strong>\n            <span>30d swap count</span>\n          </button>\n          <button className=\"button\">\n            <strong>{formatMoney(stats.monthlyActiveUsers)}</strong>\n            <span>30d active users</span>\n          </button>\n          <button className=\"button\">\n            <strong>{formatMoney(stats.swapCount)}</strong>\n            <span>total swap count</span>\n          </button>\n          <button className=\"button\">\n            <strong>{formatMoney(stats.uniqueSwapperCount)}</strong>\n            <span>unique users</span>\n          </button>\n          <button className=\"button\">\n            <strong>${formatMoney(stats.runePriceUSD, 2)}</strong>\n            <span>rune price</span>\n          </button>\n          <button className=\"button\">\n            <strong>\n              $\n              {formatMoney(\n                (parseFloat(stats.impermanentLossProtectionPaid) /\n                  Math.pow(10, 8)) *\n                  parseFloat(stats.runePriceUSD)\n              )}\n            </strong>\n            <span>il paid</span>\n          </button>\n        </div>\n      ) : (\n        \"loading...\"\n      )}\n    </Box>\n  );\n}\n","import { useState } from \"react\";\nimport { merge, sortBy } from \"../utils\";\n\nexport default function Table({\n  headers,\n  rows,\n  defaultSort,\n  onSortChange,\n  filters: propsFilters,\n  onFilterChange: propsOnFilterChange,\n}) {\n  const [filters, setFilters] = useState(propsFilters || {});\n  const [sort, setSort] = useState(defaultSort || \"+\" + headers[0].id);\n\n  function onFilterChange(headerId, e) {\n    let newValue = null;\n    if (e.target.value !== \"all\") {\n      newValue = e.target.value;\n    }\n    const newFilters = merge(filters, { [headerId]: newValue });\n    setFilters(newFilters);\n    if (propsOnFilterChange) {\n      propsOnFilterChange(newFilters);\n    }\n  }\n\n  function onSort(headerId) {\n    let newSort;\n    if (sort && sort.slice(1) === headerId) {\n      newSort = (sort[0] === \"+\" ? \"-\" : \"+\") + sort.slice(1);\n    } else {\n      newSort = \"+\" + headerId;\n    }\n    setSort(newSort);\n    if (onSortChange) onSortChange(newSort);\n  }\n\n  let filteredRows = rows.filter((r) => {\n    for (let i in filters) {\n      if (filters[i]) {\n        if (r[i] !== filters[i]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  });\n  let sortProp = sort.slice(1);\n  filteredRows = sortBy(\n    (r) => (sortProp + \"Value\" in r ? r[sortProp + \"Value\"] : r[sortProp]),\n    filteredRows\n  );\n  if (sort[0] === \"-\") filteredRows = filteredRows.reverse();\n\n  const valuesForFilter = (key) => {\n    const uniq = (e, i, a) => a.indexOf(e) === i;\n    return rows\n      .map((r) => r[key + \"Value\"] || r[key])\n      .filter(uniq)\n      .sort();\n  };\n\n  return (\n    <table className=\"trading-table\">\n      <thead>\n        <tr>\n          {headers.map((h) => (\n            <th key={h.id} className={h.class} style={h.style || {}}>\n              {h.filter ? (\n                <select\n                  onChange={onFilterChange.bind(null, h.id)}\n                  value={filters[h.id] || \"all\"}\n                >\n                  <option value=\"all\">all</option>\n                  {valuesForFilter(h.id).map((v) => (\n                    <option key={v} value={v}>\n                      {v}\n                    </option>\n                  ))}\n                </select>\n              ) : null}\n            </th>\n          ))}\n        </tr>\n        <tr>\n          {headers.map((h) => (\n            <th\n              key={h.id}\n              className={h.class}\n              style={h.style || {}}\n              onClick={onSort.bind(null, h.id)}\n            >\n              {sort.slice(1) === h.id ? sort[0] : \"\"}\n              {h.name || h.id}\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {filteredRows.map((r, i) => (\n          <tr key={i}>\n            {headers.map((h) => (\n              <td\n                key={h.id}\n                className={h.class + \" \" + r[h.id + \"Class\"] || \"\"}\n                style={h.style || {}}\n                title={r[h.id + \"Title\"] || \"\"}\n              >\n                {r[h.id]}\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { useState } from \"react\";\nimport { merge, formatMoney, useGlobalState, explorerPoolUrl } from \"../utils\";\nimport Box from \"./box\";\nimport Icon from \"./icon\";\nimport Table from \"./table\";\n\nexport default function NodePools({ data, path, updateWorkspace }) {\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [{ selected: wallet }] = useGlobalState(\"wallets\", {});\n  const [pools] = useGlobalState(\"pools\", []);\n  const network = wallet ? wallet.network : \"mainnet\";\n\n  function onDataChange(key, value) {\n    const updateFn = (n) => merge(n, { data: merge(n.data, { [key]: value }) });\n    updateWorkspace(updateFn, path);\n  }\n  function onColumnChange(headerId, e) {\n    const columns = (data.hiddenColumns || []).filter((c) => c !== headerId);\n    if (!e.target.checked) columns.push(headerId);\n    onDataChange(\"hiddenColumns\", columns);\n  }\n  function onToggleSettings() {\n    setIsSettingsOpen(!isSettingsOpen);\n  }\n\n  const headers = [\n    { id: \"asset\", filter: true },\n    { id: \"status\", filter: true },\n    { id: \"price\", class: \"text-right\" },\n    { id: \"apy\", class: \"text-right\" },\n    { id: \"depth\", class: \"text-right\" },\n    { id: \"volume\", name: \"volume (24h)\", class: \"text-right\" },\n  ];\n  const rows = pools.map((p) => {\n    return {\n      asset: (\n        <a target=\"_blank\" href={explorerPoolUrl(network, p.asset)}>\n          {p.asset}\n        </a>\n      ),\n      assetValue: p.asset,\n      status: p.status,\n      price: formatMoney(p.price, 2),\n      priceValue: p.price,\n      apy: formatMoney(p.apy * 100, 2),\n      apyValue: p.apy,\n      depth: formatMoney(p.depth),\n      depthValue: p.depth,\n      volume: formatMoney(p.volume),\n      volumeValue: p.volume,\n    };\n  });\n\n  return (\n    <Box\n      title=\"Pools\"\n      path={path}\n      updateWorkspace={updateWorkspace}\n      right={\n        <div\n          className=\"box-header-icon\"\n          title=\"Settings\"\n          onClick={onToggleSettings}\n        >\n          <Icon name=\"cog\" />\n        </div>\n      }\n    >\n      {!isSettingsOpen ? (\n        <Table\n          headers={headers.filter(\n            (h) => !(data.hiddenColumns || []).includes(h.id)\n          )}\n          rows={rows}\n          filters={data.filters}\n          onFilterChange={onDataChange.bind(null, \"filters\")}\n          defaultSort={data.sort}\n          onSortChange={onDataChange.bind(null, \"sort\")}\n        />\n      ) : (\n        <div className=\"p-2\">\n          <div className=\"row mb-4\">\n            <div className=\"text-lg text-bold\">panel settings</div>\n            <div className=\"text-right\">\n              <a onClick={onToggleSettings}>close</a>\n            </div>\n          </div>\n          <div className=\"mb-2 text-bold\">columns</div>\n          {headers.map((h) => (\n            <div className=\"\" key={h.id}>\n              <input\n                type=\"checkbox\"\n                className=\"mr-2\"\n                checked={!(data.hiddenColumns || []).includes(h.id)}\n                onChange={onColumnChange.bind(null, h.id)}\n              />\n              {h.name || h.id}\n            </div>\n          ))}\n        </div>\n      )}\n    </Box>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport {\n  merge,\n  formatDate,\n  formatMoney,\n  useGlobalState,\n  midgardRequest,\n  thornodeRequest,\n} from \"../utils\";\nimport { stableByNetwork } from \"../constants\";\nimport Box from \"./box\";\nimport Icon from \"./icon\";\nimport Table from \"./table\";\n\nexport default function NodeWallet({ data, path, updateWorkspace }) {\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [{ selected: wallet }] = useGlobalState(\"wallets\", {});\n  const [pools] = useGlobalState(\"pools\", []);\n  const [addressPools, setAddressPools] = useState([]);\n  const [addressBalances, setAddressBalances] = useState([]);\n\n  function onDataChange(key, value) {\n    const updateFn = (n) => merge(n, { data: merge(n.data, { [key]: value }) });\n    updateWorkspace(updateFn, path);\n  }\n  function onColumnChange(headerId, e) {\n    const columns = (data.hiddenColumns || []).filter((c) => c !== headerId);\n    if (!e.target.checked) columns.push(headerId);\n    onDataChange(\"hiddenColumns\", columns);\n  }\n  function onToggleSettings() {\n    setIsSettingsOpen(!isSettingsOpen);\n  }\n\n  useEffect(() => {\n    if (!wallet?.address) return;\n    function update() {\n      midgardRequest(wallet.network, \"/member/\" + wallet.address).then(\n        (result) => setAddressPools(result.pools),\n        () => {}\n      );\n      thornodeRequest(\n        wallet.network,\n        \"/cosmos/bank/v1beta1/balances/\" + wallet.address\n      ).then(\n        (result) => setAddressBalances(result.balances),\n        () => {}\n      );\n    }\n    setAddressPools([]);\n    update();\n    const handle = setInterval(update, 5 * 1000);\n    return () => clearInterval(handle);\n  }, [wallet]);\n\n  const headers = [\n    { id: \"asset\", filter: true },\n    { id: \"value\", class: \"text-right\" },\n    { id: \"assetAmount\", name: \"asset\", class: \"text-right\" },\n    { id: \"assetRemoved\", name: \"-asset\", class: \"text-right\" },\n    { id: \"runeAmount\", name: \"rune\", class: \"text-right\" },\n    { id: \"runeRemoved\", name: \"-rune\", class: \"text-right\" },\n    { id: \"start\", name: \"first added\", class: \"text-right\" },\n  ];\n  const rows = [];\n  addressBalances.forEach((b) => {\n    let assetName = b.denom.toUpperCase().replace(\"/\", \".\");\n    const assetPool = pools.find((p) => p.asset === assetName);\n    const stablePool = pools.find(\n      (p) => p.asset === stableByNetwork[wallet ? wallet.network : \"mainnet\"]\n    );\n    let price = 0;\n    if (b.denom === \"rune\" && stablePool) {\n      price = stablePool.depthAsset / stablePool.depthRune;\n    } else if (assetPool) {\n      price = assetPool.price;\n    }\n    const amount = parseInt(b.amount) / Math.pow(10, 8);\n    rows.push({\n      asset: b.denom.toUpperCase(),\n      value: formatMoney(amount * price, 2),\n      valueValue: amount * price,\n      assetAmount: formatMoney(amount, 2),\n      assetAmountValue: amount,\n      assetRemoved: \"\",\n      runeAmount: \"\",\n      runeRemoved: \"\",\n      start: \"\",\n    });\n  });\n  addressPools.forEach((p) => {\n    const pool = pools.find((pp) => pp.asset === p.pool);\n    if (!pool) return;\n    const amountAsset =\n      (parseInt(p.assetAdded) - parseInt(p.assetWithdrawn)) / Math.pow(10, 8);\n    const amountRune =\n      (parseInt(p.runeAdded) - parseInt(p.runeWithdrawn)) / Math.pow(10, 8);\n    const value =\n      (parseInt(p.liquidityUnits) / pool.units) *\n      ((pool.depthAsset * 2) / Math.pow(10, 8)) *\n      pool.price;\n    rows.push({\n      asset: p.pool + \" Pool\",\n      value: formatMoney(value, 2),\n      valueValue: value,\n      assetAmount: formatMoney(amountAsset, 2),\n      assetAmountValue: amountAsset,\n      assetRemoved: formatMoney(\n        parseInt(p.assetWithdrawn) / Math.pow(10, 8),\n        2\n      ),\n      assetRemovedValue: parseInt(p.assetWithdrawn),\n      runeAmount: formatMoney(amountRune, 1),\n      runeAmountValue: parseInt(amountRune),\n      runeRemoved: formatMoney(parseInt(p.runeWithdrawn) / Math.pow(10, 8), 1),\n      runeRemovedValue: parseInt(p.assetWithdrawn),\n      start: formatDate(parseInt(p.dateFirstAdded) * 1000),\n    });\n  });\n\n  return (\n    <Box\n      title=\"Wallet\"\n      path={path}\n      updateWorkspace={updateWorkspace}\n      right={\n        <div\n          className=\"box-header-icon\"\n          title=\"Settings\"\n          onClick={onToggleSettings}\n        >\n          <Icon name=\"cog\" />\n        </div>\n      }\n    >\n      {!isSettingsOpen ? (\n        <Table\n          headers={headers.filter(\n            (h) => !(data.hiddenColumns || []).includes(h.id)\n          )}\n          rows={rows}\n          filters={data.filters}\n          onFilterChange={onDataChange.bind(null, \"filters\")}\n          defaultSort={data.sort}\n          onSortChange={onDataChange.bind(null, \"sort\")}\n        />\n      ) : (\n        <div className=\"p-2\">\n          <div className=\"row mb-4\">\n            <div className=\"text-lg text-bold\">panel settings</div>\n            <div className=\"text-right\">\n              <a onClick={onToggleSettings}>close</a>\n            </div>\n          </div>\n          <div className=\"mb-2 text-bold\">columns</div>\n          {headers.map((h) => (\n            <div className=\"\" key={h.id}>\n              <input\n                type=\"checkbox\"\n                className=\"mr-2\"\n                checked={!(data.hiddenColumns || []).includes(h.id)}\n                onChange={onColumnChange.bind(null, h.id)}\n              />\n              {h.name || h.id}\n            </div>\n          ))}\n        </div>\n      )}\n    </Box>\n  );\n}\n","import { useRef, useState, useEffect } from \"react\";\nimport { createChart } from \"lightweight-charts\";\nimport { merge, formatMoney, midgardRequest, useGlobalState } from \"../utils\";\nimport { stableByNetwork } from \"../constants\";\nimport Box from \"./box\";\n\nexport default function NodeChart({ data, path, updateWorkspace }) {\n  const chartRef = useRef();\n  const [{ selected: wallet }] = useGlobalState(\"wallets\", {});\n  const [pools] = useGlobalState(\"pools\", []);\n  const [asset, setAsset] = useState(data.asset || \"BTC.BTC\");\n  const [range, setRange] = useState(data.range || \"1d\");\n  const [prices, setPrices] = useState();\n  const pool = pools.find(p => p.asset === asset);\n  let price = pool ? pool.price : 0;\n  if (asset === 'THOR.RUNE') {\n    const stablePool = pools.find(p => p.asset === stableByNetwork[wallet ? wallet.network : 'mainnet']);\n    if (stablePool) price = stablePool.depthAsset/stablePool.depthRune;\n  }\n\n  function loadData(asset, range) {\n    const queryMap = {\n      \"1d\": \"interval=5min&count=288\",\n      \"1w\": \"interval=hour&count=168\",\n      \"3m\": \"interval=day&count=90\",\n      \"1y\": \"interval=day&count=365\",\n    };\n    const network = wallet ? wallet.network : 'mainnet';\n    if (asset === \"THOR.RUNE\") {\n      const usdAsset = stableByNetwork[network];\n      midgardRequest(\n        network,\n        \"/history/depths/\" + usdAsset + \"?\" + queryMap[range]\n      ).then(\n        (result) =>\n          setPrices(\n            result.intervals.map((i) =>\n              merge(i, {\n                assetPriceUSD: 1 / parseFloat(i.assetPrice),\n              })\n            )\n          ),\n        () => {}\n      );\n    } else {\n      midgardRequest(\n        network,\n        \"/history/depths/\" + asset + \"?\" + queryMap[range]\n      ).then(\n        (result) => setPrices(result.intervals),\n        () => {}\n      );\n    }\n  }\n\n  function onAssetChange(e) {\n    const newAsset = e.target.value;\n    setAsset(newAsset);\n    const updateFn = (n) =>\n      merge(n, { data: merge(n.data, { asset: newAsset }) });\n    updateWorkspace(updateFn, path);\n  }\n  function onRangeChange(e) {\n    const newRange = e.target.value;\n    setRange(newRange);\n    const updateFn = (n) =>\n      merge(n, { data: merge(n.data, { range: newRange }) });\n    updateWorkspace(updateFn, path);\n  }\n\n  useEffect(() => {\n    loadData(asset, range);\n    const handle = setInterval(() => loadData(asset, range), 15000);\n    return () => clearInterval(handle);\n  }, [asset, range]);\n  useEffect(() => {\n    const el = chartRef.current;\n    if (!el || !prices) return;\n    while (el.lastChild) {\n      el.removeChild(el.lastChild);\n    }\n    const rect = el.getBoundingClientRect();\n    const chart = createChart(el, {\n      width: rect.width,\n      height: rect.height,\n      layout: {\n        backgroundColor: \"#111827\",\n        textColor: \"#ffffff\",\n        fontSize: 12,\n        fontFamily: \"IBM Plex Mono\",\n      },\n      vertLines: {\n        color: \"rgba(40,40,40,0.2)\",\n        style: 1,\n        visible: true,\n      },\n      horzLines: {\n        color: \"rgba(40,40,40,0.2)\",\n        style: 1,\n        visible: true,\n      },\n      timeScale: {\n        fixLeftEdge: true,\n        timeVisible: true,\n      },\n    });\n    const series = chart.addAreaSeries({\n      bottomColor: \"rgba(35, 220, 200, 0.5)\",\n      lineColor: \"rgba(35, 220, 200, 1)\",\n    });\n    series.setData(\n      prices.map((p) => ({\n        time: parseInt(p.startTime),\n        value: parseFloat(p.assetPriceUSD),\n      }))\n    );\n    chart.timeScale().setVisibleLogicalRange({\n      from: 0,\n      to: prices.length,\n    });\n  }, [chartRef.current, prices]);\n\n  return (\n    <Box title=\"Chart\" path={path} updateWorkspace={updateWorkspace}>\n      <div style={{ display: \"flex\", flexDirection: \"column\", height: \"100%\" }}>\n        <div style={{ display: \"flex\", padding: \"4px\" }}>\n          <select\n            value={asset}\n            onChange={onAssetChange}\n            style={{ padding: \"4px 8px\", width: \"100px\", marginRight: \"8px\" }}\n          >\n            <option value=\"THOR.RUNE\">THOR.RUNE</option>\n            {pools\n              .sort((a, b) => a.depth - b.depth)\n              .map((p) => (\n                <option value={p.asset} key={p.asset}>\n                  {p.asset.slice(0, 12)}\n                </option>\n              ))}\n          </select>\n          <select\n            value={range}\n            onChange={onRangeChange}\n            style={{ padding: \"4px 8px\", width: \"100px\" }}\n          >\n            <option value=\"1d\">past day</option>\n            <option value=\"1w\">past week</option>\n            <option value=\"3m\">past 3 months</option>\n            <option value=\"1y\">past year</option>\n          </select>\n          <div style={{ flex: \"1\" }} />\n          <div>\n            {formatMoney(price, 3)}\n          </div>\n        </div>\n        <div style={{ flex: \"1\" }} ref={chartRef} />\n      </div>\n    </Box>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport {\n  merge,\n  formatDate,\n  formatTime,\n  formatMoney,\n  useGlobalState,\n  midgardRequest,\n  explorerTransactionUrl,\n} from \"../utils\";\nimport Box from \"./box\";\nimport Icon from \"./icon\";\nimport Table from \"./table\";\n\nexport default function NodeHistory({ data, path, updateWorkspace }) {\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [{ selected: wallet }] = useGlobalState(\"wallets\", {});\n  const [addressActions, setAddressActions] = useState([]);\n\n  function onDataChange(key, value) {\n    const updateFn = (n) => merge(n, { data: merge(n.data, { [key]: value }) });\n    updateWorkspace(updateFn, path);\n  }\n  function onColumnChange(headerId, e) {\n    const columns = (data.hiddenColumns || []).filter((c) => c !== headerId);\n    if (!e.target.checked) columns.push(headerId);\n    onDataChange(\"hiddenColumns\", columns);\n  }\n  function onToggleSettings() {\n    setIsSettingsOpen(!isSettingsOpen);\n  }\n\n  useEffect(() => {\n    if (!wallet?.address) return;\n    setAddressActions([]);\n    midgardRequest(\n      wallet?.network || \"mainnet\",\n      \"/actions?limit=50&offset=0&address=\" + wallet.address\n    ).then(\n      (result) => setAddressActions(result.actions),\n      () => {}\n    );\n  }, [wallet]);\n\n  const headers = [\n    { id: \"time\", class: \"w-datetime\" },\n    { id: \"type\", filter: true },\n    { id: \"status\", filter: true },\n    { id: \"asset\", filter: true },\n    { id: \"asset2\", filter: true },\n    { id: \"amount\", class: \"text-right\" },\n  ];\n  const rows = [];\n  addressActions.forEach((a) => {\n    let asset = \"\";\n    let asset2 = \"\";\n    let amount = 0;\n    if (a.type === \"switch\") {\n      asset = a.in[0].coins[0].asset;\n      asset2 = a.out[0].coins[0].asset;\n      amount = parseInt(a.out[0].coins[0].amount) / Math.pow(10, 8);\n    }\n    if (a.type === \"addLiquidity\") {\n      asset = a.pools[0];\n      asset2 = a.in[0].coins[0].asset;\n      amount = parseInt(a.in[0].coins[0].amount) / Math.pow(10, 8);\n    }\n    if (a.type === \"withdraw\") {\n      asset = a.pools[0];\n      asset2 = a.out[0].coins[0].asset;\n      amount = parseInt(a.out[0].coins[0].amount) / Math.pow(10, 8);\n    }\n    if (a.type === \"swap\") {\n      asset = a.in[0].coins[0].asset;\n      if (a.out.length > 0) {\n        asset2 = a.out[0].coins[0].asset;\n        amount = parseInt(a.out[0].coins[0].amount) / Math.pow(10, 8);\n      }\n    }\n    let transactionId = \"\";\n    if (a.out.length > 0) {\n      transactionId = a.out[0].txID;\n    }\n    if (a.in.length > 0) {\n      transactionId = a.in[0].txID;\n    }\n    rows.push({\n      time: (\n        <a\n          target=\"_blank\"\n          href={explorerTransactionUrl(\n            wallet?.network || \"mainnet\",\n            transactionId\n          )}\n        >\n          {formatDate(parseInt(a.date) / 1000000).slice(2) +\n            \" \" +\n            formatTime(parseInt(a.date) / 1000000)}\n        </a>\n      ),\n      timeValue: parseInt(a.date),\n      type: a.type,\n      status: a.status,\n      asset: asset,\n      asset2: asset2,\n      amount: formatMoney(amount, 2),\n      amountValue: amount,\n    });\n  });\n  return (\n    <Box\n      title=\"History\"\n      path={path}\n      updateWorkspace={updateWorkspace}\n      right={\n        <div\n          className=\"box-header-icon\"\n          title=\"Settings\"\n          onClick={onToggleSettings}\n        >\n          <Icon name=\"cog\" />\n        </div>\n      }\n    >\n      {!isSettingsOpen ? (\n        <Table\n          headers={headers.filter(\n            (h) => !(data.hiddenColumns || []).includes(h.id)\n          )}\n          rows={rows}\n          filters={data.filters}\n          onFilterChange={onDataChange.bind(null, \"filters\")}\n          defaultSort={data.sort || \"-time\"}\n          onSortChange={onDataChange.bind(null, \"sort\")}\n        />\n      ) : (\n        <div className=\"p-2\">\n          <div className=\"row mb-4\">\n            <div className=\"text-lg text-bold\">panel settings</div>\n            <div className=\"text-right\">\n              <a onClick={onToggleSettings}>close</a>\n            </div>\n          </div>\n          <div className=\"mb-2 text-bold\">columns</div>\n          {headers.map((h) => (\n            <div className=\"\" key={h.id}>\n              <input\n                type=\"checkbox\"\n                className=\"mr-2\"\n                checked={!(data.hiddenColumns || []).includes(h.id)}\n                onChange={onColumnChange.bind(null, h.id)}\n              />\n              {h.name || h.id}\n            </div>\n          ))}\n        </div>\n      )}\n    </Box>\n  );\n}\n","import { useState } from \"react\";\nimport {\n  merge,\n  explorerTransactionUrl,\n  isValidThorAddress,\n  useGlobalState,\n  thorchainTransaction,\n} from \"../utils\";\nimport Box from \"./box\";\n\nexport default function NodeManualTransaction({ data, path, updateWorkspace }) {\n  const [{ selected: wallet }] = useGlobalState(\"wallets\", {});\n  const [pools] = useGlobalState(\"pools\", []);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [transactionId, setTransactionId] = useState();\n  const [options, setOptions] = useState(\n    merge(\n      {\n        type: \"transfer\",\n        action: \"swap\",\n        percent: \"100\",\n      },\n      data.options || {}\n    )\n  );\n\n  function computeMemo() {\n    const { asset = \"\", address = \"\", limit = \"\", percent = \"\" } = options;\n    const p = parseInt(parseFloat(percent) * 100);\n    let memo = options.action.toUpperCase();\n    if (options.action === \"swap\") {\n      memo += `:${asset}:${address}:${limit}`;\n    } else if (options.action === \"add\") {\n      memo += `:${asset}:${address}`;\n    } else if (options.action === \"withdraw\") {\n      memo += `:${asset}:${p}${options.assym ? \":\" + options.assym : \"\"}`;\n    } else if (options.action === \"bond\" || options.action === \"leave\") {\n      memo += `:${address}`;\n    } else if (options.action === \"unbond\") {\n      memo += `:${address}:${p}`;\n    }\n    return memo;\n  }\n  function onOptionChange(key, value) {\n    const newOptions = merge(options, { [key]: value });\n    setOptions(newOptions);\n    const updateFn = (n) =>\n      merge(n, { data: merge(n.data, { options: newOptions }) });\n    updateWorkspace(updateFn, path);\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    setError(\"\");\n    setTransactionId();\n\n    if (!wallet?.address) {\n      return setError(\"no wallet connected\");\n    }\n    let amount = parseInt(parseFloat(options.amount || \"0\") * Math.pow(10, 8));\n    if (Number.isNaN(amount)) {\n      return setError(\"amount is not a valid number\");\n    }\n    if (options.type === \"transfer\") {\n      if (!isValidThorAddress(options.address)) {\n        return setError(\"recipient address is not valid\");\n      }\n    } else if (options.type === \"deposit\") {\n      if ([\"withdraw\", \"unbond\", \"leave\"].includes(options.action)) {\n        if (amount) {\n          return setError(\"don't send an amount for \" + options.action);\n        }\n        amount = 1;\n      }\n      if ([\"swap\", \"add\", \"withdraw\"].includes(options.action)) {\n        const p = pools.find((p) => p.asset === options.asset);\n        if (!p) {\n          return setError(\"selected asset is not valid\");\n        }\n      }\n    }\n    try {\n      if (wallet.type !== \"xdefi\") {\n        setIsLoading(true);\n      }\n      if (options.type === \"transfer\") {\n        const txId = await thorchainTransaction(wallet, \"transfer\", {\n          amount: amount,\n          recipient: options.address,\n          // asset: { chain: \"THOR\", symbol: \"RUNE\", ticker: \"RUNE\" },\n          // memo: \"\",\n        });\n        setTransactionId(txId);\n      } else if (options.type === \"deposit\") {\n        const memo = computeMemo();\n        const txId = await thorchainTransaction(wallet, \"deposit\", {\n          from: wallet.address,\n          amount: amount,\n          memo: memo,\n        });\n        setTransactionId(txId);\n      }\n\n      // clear some options to avoid mistakingly leaving as is in next transaction\n      const newOptions = merge(options, {\n        amount: \"\",\n        limit: \"\",\n        percent: \"100\",\n      });\n      setOptions(newOptions);\n      const updateFn = (n) =>\n        merge(n, { data: merge(n.data, { options: newOptions }) });\n      updateWorkspace(updateFn, path);\n    } catch (err) {\n      console.error(err);\n      setError(err.toString());\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <Box\n      title=\"Manual Transaction\"\n      path={path}\n      updateWorkspace={updateWorkspace}\n    >\n      <form className=\"p-2\" onSubmit={onSubmit}>\n        <div className=\"row mb-2\">\n          <div className=\"\">\n            <label>type</label>\n            <select\n              value={options.type}\n              onChange={(e) => onOptionChange(\"type\", e.target.value)}\n            >\n              <option value=\"transfer\">transfer</option>\n              <option value=\"deposit\">deposit</option>\n            </select>\n          </div>\n          <div className=\"\">\n            <label>input amount</label>\n            <input\n              type=\"text\"\n              value={options.amount || \"\"}\n              onChange={(e) => onOptionChange(\"amount\", e.target.value)}\n              placeholder=\"0.0\"\n            />\n          </div>\n        </div>\n        {options.type === \"deposit\" ? (\n          <div>\n            <div className=\"row mb-2\">\n              <div className=\"\">\n                <label>action</label>\n                <select\n                  value={options.action}\n                  onChange={(e) => onOptionChange(\"action\", e.target.value)}\n                >\n                  <option value=\"swap\">swap</option>\n                  <option value=\"add\">add</option>\n                  <option value=\"withdraw\">withdraw</option>\n                  <option value=\"bond\">bond</option>\n                  <option value=\"unbond\">unbond</option>\n                  <option value=\"leave\">leave</option>\n                </select>\n              </div>\n              {[\"swap\", \"add\", \"withdraw\"].includes(options.action) ? (\n                <div>\n                  <label>asset</label>\n                  <select\n                    value={options.asset || \"\"}\n                    onChange={(e) => onOptionChange(\"asset\", e.target.value)}\n                  >\n                    {pools.map((p) => (\n                      <option value={p.asset} key={p.asset}>\n                        {p.asset}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              ) : null}\n              {[\"bond\", \"unbond\", \"leave\"].includes(options.action) ? (\n                <div className=\"\">\n                  <label>address</label>\n                  <input\n                    type=\"text\"\n                    value={options.address || \"\"}\n                    onChange={(e) => onOptionChange(\"address\", e.target.value)}\n                    placeholder=\"e.g. thor1a2b3c...\"\n                  />\n                </div>\n              ) : null}\n            </div>\n            <div className=\"row mb-2\">\n              {[\"swap\", \"add\"].includes(options.action) ? (\n                <div className=\"\">\n                  <label>address (optional)</label>\n                  <input\n                    type=\"text\"\n                    value={options.address || \"\"}\n                    onChange={(e) => onOptionChange(\"address\", e.target.value)}\n                    placeholder=\"e.g. thor1a2b3c...\"\n                  />\n                </div>\n              ) : null}\n              {options.action === \"swap\" ? (\n                <div className=\"\">\n                  <label>limit</label>\n                  <input\n                    type=\"text\"\n                    value={options.limit || \"\"}\n                    onChange={(e) => onOptionChange(\"limit\", e.target.value)}\n                  />\n                </div>\n              ) : null}\n              {[\"withdraw\", \"unbond\"].includes(options.action) ? (\n                <div className=\"\">\n                  <label>percentage</label>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"100\"\n                    step=\"0.01\"\n                    value={options.percent || \"\"}\n                    onChange={(e) => onOptionChange(\"percent\", e.target.value)}\n                  />\n                </div>\n              ) : null}\n              {[\"withdraw\"].includes(options.action) ? (\n                <div>\n                  <label>assym. asset (optional)</label>\n                  <input\n                    type=\"text\"\n                    value={options.assym || \"\"}\n                    onChange={(e) => onOptionChange(\"assym\", e.target.value)}\n                    placeholder=\"e.g. THOR.RUNE\"\n                  />\n                </div>\n              ) : null}\n            </div>\n          </div>\n        ) : (\n          <div className=\"mb-2\">\n            <label>recipient address</label>\n            <input\n              type=\"text\"\n              value={options.address || \"\"}\n              onChange={(e) => onOptionChange(\"address\", e.target.value)}\n              placeholder=\"e.g. thor1a2b3c...\"\n            />\n          </div>\n        )}\n\n        {options.type === \"deposit\" ? (\n          <div className=\"truncate mb-2\">memo: {computeMemo()}</div>\n        ) : null}\n        {error ? <div className=\"text-red mb-2\">{error}</div> : null}\n        <button type=\"submit\" className=\"btn w-full mb-2\" disabled={isLoading}>\n          {isLoading ? \"loading...\" : \"submit\"}\n        </button>\n        {transactionId ? (\n          <div className=\"truncate\">\n            tx:{\" \"}\n            <a\n              href={explorerTransactionUrl(\n                wallet?.network || \"mainnet\",\n                transactionId\n              )}\n              target=\"_blank\"\n            >\n              {transactionId}\n            </a>\n          </div>\n        ) : null}\n      </form>\n    </Box>\n  );\n}\n","import { useState } from \"react\";\nimport {\n  merge,\n  explorerTransactionUrl,\n  useGlobalState,\n  thorchainTransaction,\n} from \"../utils\";\nimport Box from \"./box\";\n\nexport default function NodeTrade({ data, path, updateWorkspace }) {\n  const [{ selected: wallet }] = useGlobalState(\"wallets\", {});\n  const [pools] = useGlobalState(\"pools\", []);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [transactionId, setTransactionId] = useState();\n  const [options, setOptions] = useState(merge({}, data.options || {}));\n  const assetPool = pools.find((p) => p.asset === options.asset);\n\n  function onOptionChange(key, value) {\n    const newOptions = merge(options, { [key]: value });\n    setOptions(newOptions);\n    const updateFn = (n) =>\n      merge(n, { data: merge(n.data, { options: newOptions }) });\n    updateWorkspace(updateFn, path);\n  }\n\n  async function onSubmit(buyOrSell, e) {\n    e.preventDefault();\n    setError(\"\");\n    setIsLoading(true);\n\n    if (!wallet?.address) {\n      return setError(\"no wallet connected\");\n    }\n    let amount = parseInt(parseFloat(options.amount) * Math.pow(10, 8));\n    if (Number.isNaN(amount)) {\n      return setError(\"amount is not a valid number\");\n    }\n    if (!assetPool) {\n      return setError(\"selected asset is not valid\");\n    }\n    try {\n      setIsLoading(false);\n      if (buyOrSell === \"buy\") {\n        amount = parseInt(\n          amount * (assetPool.depthRune / assetPool.depthAsset)\n        );\n      }\n      const assetSynthName = options.asset.replace(\".\", \"/\");\n      const txId = await thorchainTransaction(wallet, \"deposit\", {\n        from: wallet.address,\n        amount: amount,\n        memo: \"SWAP:\" + (buyOrSell === \"buy\" ? assetSynthName : \"THOR.RUNE\"),\n        asset:\n          buyOrSell === \"buy\"\n            ? undefined\n            : {\n                chain: \"THOR\",\n                symbol: assetSynthName.toUpperCase(),\n                ticker: assetSynthName.toUpperCase(),\n              },\n      });\n      setTransactionId(txId);\n\n      // clear some options to avoid mistakingly leaving as is in next transaction\n      onOptionChange(\"amount\", \"\");\n    } catch (err) {\n      console.error(err);\n      setError(err.toString());\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <Box title=\"Trade\" path={path} updateWorkspace={updateWorkspace}>\n      <form className=\"p-2\" onSubmit={(e) => e.preventDefault()}>\n        <div className=\"row mb-2\">\n          <div className=\"\">\n            <label>asset</label>\n            <select\n              value={options.asset || \"\"}\n              onChange={(e) => onOptionChange(\"asset\", e.target.value)}\n            >\n              <option value=\"\">Select an asset</option>\n              {pools.map((p) => (\n                <option value={p.asset} key={p.asset}>\n                  {p.asset}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"\">\n            <label>amount</label>\n            <input\n              type=\"text\"\n              value={options.amount || \"\"}\n              onChange={(e) => onOptionChange(\"amount\", e.target.value)}\n              placeholder=\"0.0\"\n            />\n          </div>\n        </div>\n\n        <div className=\"row mb-2\">\n          <div className=\"truncate\">\n            {assetPool ? \"price: $\" + assetPool.price.toFixed(3) : \"\"}\n          </div>\n          <div className=\"truncate\">\n            {assetPool\n              ? \" value: $\" +\n                ((parseFloat(options.amount) || 0) * assetPool.price).toFixed(2)\n              : \"\"}\n          </div>\n        </div>\n\n        {error ? <div className=\"text-red mb-2\">{error}</div> : null}\n\n        <div className=\"row mb-2\">\n          <button\n            type=\"submit\"\n            className=\"btn w-full mb-2 mr-2\"\n            disabled={isLoading}\n            onClick={onSubmit.bind(null, \"sell\")}\n          >\n            {isLoading ? \"loading...\" : \"sell\"}\n          </button>\n          <button\n            type=\"submit\"\n            className=\"btn w-full mb-2\"\n            disabled={isLoading}\n            onClick={onSubmit.bind(null, \"buy\")}\n          >\n            {isLoading ? \"loading...\" : \"buy\"}\n          </button>\n        </div>\n\n        {transactionId ? (\n          <div className=\"truncate\">\n            tx:{\" \"}\n            <a\n              href={explorerTransactionUrl(wallet.network, transactionId)}\n              target=\"_blank\"\n            >\n              {transactionId}\n            </a>\n          </div>\n        ) : null}\n      </form>\n    </Box>\n  );\n}\n","import React, { useRef, useState, useEffect } from \"react\";\nimport { merge } from \"../utils\";\nimport NodeEmpty from \"./nodeEmpty\";\nimport NodeStats from \"./nodeStats\";\nimport NodePools from \"./nodePools\";\nimport NodeWallet from \"./nodeWallet\";\nimport NodeChart from \"./nodeChart\";\nimport NodeHistory from \"./nodeHistory\";\nimport NodeManualTransaction from \"./nodeManualTransaction\";\nimport NodeTrade from \"./nodeTrade\";\n\nexport default function Node({\n  type,\n  size,\n  data,\n  path,\n  updateWorkspace,\n  top,\n  bottom,\n  left,\n  right,\n}) {\n  const nodeRef = useRef();\n  const [isDragging, setIsDragging] = useState(false);\n\n  const onMouseMove = (e) => {\n    let el = nodeRef.current;\n    let nodes = el.querySelectorAll(\".workspace-node\");\n    let rect = el.getBoundingClientRect();\n\n    let pos = type === \"hsplit\" ? e.clientX : e.clientY;\n    let edge = type === \"hsplit\" ? rect.left : rect.top;\n    let size = type === \"hsplit\" ? rect.width : rect.height;\n    let percentWidth = ((pos - edge) / size) * 100;\n    percentWidth = Math.min(85, Math.max(15, percentWidth));\n    percentWidth = Math.round(percentWidth / 5) * 5;\n    nodes[0].style.flexBasis = percentWidth + \"%\";\n    nodes[1].style.flexBasis = 100 - percentWidth + \"%\";\n\n    if (type === \"hsplit\") {\n      updateWorkspace(\n        (node) =>\n          merge(node, {\n            size: percentWidth,\n          }),\n        path.concat([\"left\"])\n      );\n      updateWorkspace(\n        (node) =>\n          merge(node, {\n            size: 100 - percentWidth,\n          }),\n        path.concat([\"right\"])\n      );\n    } else {\n      updateWorkspace(\n        (node) =>\n          merge(node, {\n            size: percentWidth,\n          }),\n        path.concat([\"top\"])\n      );\n      updateWorkspace(\n        (node) =>\n          merge(node, {\n            size: 100 - percentWidth,\n          }),\n        path.concat([\"bottom\"])\n      );\n    }\n  };\n  function onMouseDown() {\n    setIsDragging(true);\n  }\n  function onMouseUp() {\n    setIsDragging(false);\n    window.removeEventListener(\"mousemove\", onMouseMove);\n  }\n\n  useEffect(() => {\n    if (!isDragging) return;\n    window.addEventListener(\"mouseup\", onMouseUp);\n    window.addEventListener(\"mousemove\", onMouseMove);\n    return () => {\n      window.removeEventListener(\"mouseup\", onMouseUp);\n      window.removeEventListener(\"mousemove\", onMouseMove);\n    };\n  }, [isDragging]);\n\n  const renderNode = () => {\n    switch (data.type) {\n      case \"empty\":\n        return (\n          <NodeEmpty\n            data={data}\n            path={path}\n            updateWorkspace={updateWorkspace}\n          />\n        );\n      case \"stats\":\n        return (\n          <NodeStats\n            data={data}\n            path={path}\n            updateWorkspace={updateWorkspace}\n          />\n        );\n      case \"pools\":\n        return (\n          <NodePools\n            data={data}\n            path={path}\n            updateWorkspace={updateWorkspace}\n          />\n        );\n      case \"wallet\":\n        return (\n          <NodeWallet\n            data={data}\n            path={path}\n            updateWorkspace={updateWorkspace}\n          />\n        );\n      case \"chart\":\n        return (\n          <NodeChart\n            data={data}\n            path={path}\n            updateWorkspace={updateWorkspace}\n          />\n        );\n      case \"history\":\n        return (\n          <NodeHistory\n            data={data}\n            path={path}\n            updateWorkspace={updateWorkspace}\n          />\n        );\n      case \"manualTransaction\":\n        return (\n          <NodeManualTransaction\n            data={data}\n            path={path}\n            updateWorkspace={updateWorkspace}\n          />\n        );\n      case \"trade\":\n        return (\n          <NodeTrade\n            data={data}\n            path={path}\n            updateWorkspace={updateWorkspace}\n          />\n        );\n      default:\n        throw new Error(\"Unknown terminal node type: \" + data.type);\n    }\n  };\n  switch (type) {\n    case \"vsplit\":\n      return (\n        <div\n          ref={nodeRef}\n          className={\n            \"workspace-node workspace-vsplit \" +\n            (isDragging ? \"is-dragging\" : \"\")\n          }\n          style={{ flexBasis: size + \"%\" }}\n        >\n          <Node\n            {...top}\n            path={path.concat([\"top\"])}\n            updateWorkspace={updateWorkspace}\n          />\n          <div\n            className={\n              \"workspace-resize-handle \" + (isDragging ? \"is-dragging\" : \"\")\n            }\n            onMouseDown={onMouseDown}\n          />\n          <Node\n            {...bottom}\n            path={path.concat([\"bottom\"])}\n            updateWorkspace={updateWorkspace}\n          />\n        </div>\n      );\n    case \"hsplit\":\n      return (\n        <div\n          ref={nodeRef}\n          className={\n            \"workspace-node workspace-hsplit \" +\n            (isDragging ? \"is-dragging\" : \"\")\n          }\n          style={{ flexBasis: size + \"%\" }}\n        >\n          <Node\n            {...left}\n            path={path.concat([\"left\"])}\n            updateWorkspace={updateWorkspace}\n          />\n          <div\n            className={\n              \"workspace-resize-handle \" + (isDragging ? \"is-dragging\" : \"\")\n            }\n            onMouseDown={onMouseDown}\n          />\n          <Node\n            {...right}\n            path={path.concat([\"right\"])}\n            updateWorkspace={updateWorkspace}\n          />\n        </div>\n      );\n    case \"node\":\n      return (\n        <div\n          ref={nodeRef}\n          className=\"workspace-node\"\n          style={{ flexBasis: size + \"%\" }}\n        >\n          {renderNode()}\n        </div>\n      );\n    default:\n      throw new Error(\"Unknown node type: \" + type);\n  }\n}\n","import { useEffect, useState } from \"react\";\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"@walletconnect/qrcode-modal\";\nimport { merge, formatAddress, useGlobalState } from \"../utils\";\nimport { defaultWallets } from \"../constants\";\n\nlet walletconnectAttempt = 0;\n\nexport default function ModalConfigureAddress({ onClose }) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [wallets, setWallets] = useGlobalState(\"wallets\", defaultWallets);\n  const [newWatchedAddress, setNewWatchedAddress] = useState(\"\");\n  const [newWatchedLabel, setNewWatchedLabel] = useState(\"\");\n\n  useEffect(() => {\n    const handler = (e) => {\n      if (onClose && e.key === \"Escape\") onClose();\n    };\n    window.addEventListener(\"keyup\", handler);\n    return () => window.removeEventListener(\"keyup\", handler);\n  }, []);\n\n  function onConnectXdefi() {\n    if (!window.xfi || !window.xfi.thorchain) {\n      return alert(\"XDEFI is not installed!\");\n    }\n    window.xfi.thorchain.request(\n      { method: \"request_accounts\", params: [] },\n      (err, accounts) => {\n        if (err) {\n          console.log(err);\n          return alert(\"Error connecting to XDEFI: \" + err.message);\n        }\n        const newWallet = {\n          type: \"xdefi\",\n          address: accounts[0],\n          network: window.xfi.thorchain.network,\n        };\n        setWallets(\n          merge(wallets, { connected: newWallet, selected: newWallet })\n        );\n      }\n    );\n  }\n\n  async function onConnectWalletConnect() {\n    const connector = new WalletConnect({\n      bridge: \"https://bridge.walletconnect.org\",\n      qrcodeModal: QRCodeModal,\n    });\n\n    async function setup() {\n      try {\n        const result = await connector.sendCustomRequest({\n          jsonrpc: \"2.0\",\n          method: \"get_accounts\",\n        });\n        const thorchain = result.find((w) => w.network === 931);\n        if (!thorchain) return alert(\"Thorchain wallet not available\");\n        const newWallet = {\n          type: \"walletconnect\",\n          address: thorchain.address,\n          network: \"mainnet\",\n        };\n        setWallets(\n          merge(wallets, { connected: newWallet, selected: newWallet })\n        );\n      } catch (err) {\n        console.error(err);\n        alert(\"Error: \" + err.toString());\n      }\n      setIsLoading(false);\n    }\n\n    connector.on(\"connect\", async (error, payload) => {\n      if (error) {\n        alert(\"Error connecting: \" + error.message);\n        return console.error(error);\n      }\n      setup();\n    });\n    connector.on(\"session_update\", (error, payload) => {\n      if (error) {\n        return console.error(error);\n      }\n    });\n    connector.on(\"disconnect\", (error, payload) => {\n      if (error) {\n        return console.error(error);\n      }\n      setWallets(merge(wallets, { connected: null, selected: null }));\n    });\n\n    if (walletconnectAttempt >= 3) {\n      await connector.killSession();\n      walletconnectAttempt = 0;\n    }\n    walletconnectAttempt++;\n\n    if (!connector.connected) {\n      connector.createSession();\n    } else {\n      setup();\n    }\n  }\n\n  function onSelect(w) {\n    setWallets(merge(wallets, { selected: w }));\n    onClose();\n  }\n\n  function onCopy(w, e) {\n    e.stopPropagation();\n    navigator.clipboard.writeText(w.address);\n  }\n\n  function onRemove(index, e) {\n    e.stopPropagation();\n    setWallets(\n      merge(wallets, {\n        watched: wallets.watched.filter((_, i) => i !== index),\n      })\n    );\n  }\n\n  function onRemoveConnected(e) {\n    e.stopPropagation();\n    let selected = wallets.selected;\n    if (selected.address === wallets.connected.address) selected = null;\n    setWallets(merge(wallets, { connected: null, selected }));\n  }\n\n  function onWatchedSubmit(e) {\n    e.preventDefault();\n    const newWallet = {\n      type: \"watched\",\n      address: newWatchedAddress,\n      network: newWatchedAddress.startsWith(\"thor\") ? \"mainnet\" : \"testnet\",\n      label: newWatchedLabel,\n    };\n    setNewWatchedAddress(\"\");\n    setNewWatchedLabel(\"\");\n    setWallets(\n      merge(wallets, { watched: wallets.watched.concat([newWallet]) })\n    );\n  }\n\n  return (\n    <div className=\"modal\" onClick={onClose}>\n      <div className=\"modal-overlay\" />\n      <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n        <h1>Wallets</h1>\n\n        <div className=\"text-bold mb-2 mt-4\">Connected</div>\n\n        {wallets.connected ? (\n          <div\n            className=\"row p-2 bg-gray-800 rounded pointer hover:opacity-75\"\n            onClick={onSelect.bind(null, wallets.connected)}\n          >\n            <div>\n              {formatAddress(wallets.connected.address)} (\n              {wallets.connected.network})\n            </div>\n            <div className=\"flex-shrink text-right\">\n              <a\n                className=\"ml-2\"\n                onClick={onCopy.bind(null, wallets.connected)}\n              >\n                Copy\n              </a>\n              <a className=\"ml-2\" onClick={onRemoveConnected}>\n                Remove\n              </a>\n            </div>\n          </div>\n        ) : (\n          <div className=\"row\">\n            <button className=\"btn w-full mr-2\" onClick={onConnectXdefi}>\n              Connect XDEFI\n            </button>\n            <button className=\"btn w-full\" onClick={onConnectWalletConnect}>\n              Connect WalletConnect\n            </button>\n          </div>\n        )}\n\n        <div className=\"text-bold mb-2 mt-4\">Watched</div>\n\n        {wallets.watched.map((w, i) => (\n          <div\n            className=\"row p-2 mb-2 bg-gray-800 rounded pointer hover:opacity-75\"\n            key={w.address}\n            onClick={onSelect.bind(null, w)}\n          >\n            <div>\n              {formatAddress(w.address)} {w.label ? `(${w.label})` : \"\"} (\n              {w.network})\n            </div>\n            <div className=\"flex-shrink text-right\">\n              <a className=\"ml-2\" onClick={onCopy.bind(null, w)}>\n                Copy\n              </a>\n              <a className=\"ml-2\" onClick={onRemove.bind(null, i)}>\n                Remove\n              </a>\n            </div>\n          </div>\n        ))}\n\n        <form className=\"row\" onSubmit={onWatchedSubmit}>\n          <div style={{ flex: \"1\" }}>\n            <label>Address</label>\n            <input\n              type=\"text\"\n              value={newWatchedAddress}\n              onChange={(e) => setNewWatchedAddress(e.target.value)}\n            />\n          </div>\n          <div style={{ flex: \"0 0 150px\" }}>\n            <label>Label (opt)</label>\n            <input\n              type=\"text\"\n              value={newWatchedLabel}\n              onChange={(e) => setNewWatchedLabel(e.target.value)}\n            />\n          </div>\n          <div style={{ flex: \"0 0 60px\" }}>\n            <label>&nbsp;</label>\n            <button type=\"submit\" className=\"btn w-full\">\n              Add\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport {\n  merge,\n  formatAddress,\n  useGlobalState,\n  thornodeRequest,\n  midgardRequest,\n} from \"./utils\";\nimport { stableByNetwork, defaultWorksapces } from \"./constants\";\n\nimport Icon from \"./components/icon\";\nimport Node from \"./components/node\";\nimport ModalConfigureAddress from \"./components/modalConfigureAddress\";\n\nlet gotPoolsFromMidgard = false;\n\nconst nodeSiblingNameMap = {\n  left: \"right\",\n  right: \"left\",\n  top: \"bottom\",\n  bottom: \"top\",\n};\n\nfunction App() {\n  const [modal, setModal] = useState({});\n  const [{ selected: wallet }] = useGlobalState(\"wallets\", {});\n  const [pools, setPools] = useGlobalState(\"pools\", []);\n  const [stats, setStats] = useGlobalState(\"stats\", null);\n  const [wallets, setWallets] = useGlobalState(\"wallets\");\n  const [workspaces, setWorkspaces] = useState(\n    JSON.parse(localStorage.workspaces || defaultWorksapces)\n  );\n  const [selectedWorkspaceIndex, setSelectedWorkspaceIndex] = useState(0);\n  const selectedWorkspace = workspaces[selectedWorkspaceIndex];\n\n  useEffect(() => {\n    if (!localStorage.wallets || localStorage.wallets === \"undefined\") return;\n    setWallets(JSON.parse(localStorage.wallets));\n  }, []);\n  useEffect(() => {\n    const updated = JSON.stringify(wallets);\n    if (localStorage.wallets !== updated) localStorage.wallets = updated;\n  }, [wallets]);\n  useEffect(() => {\n    const refresh = () => {\n      const n = wallet?.network || \"mainnet\";\n      thornodeRequest(n, \"/thorchain/pools\").then((thornodePools) => {\n        const stablePool = thornodePools.find(\n          (p) => p.asset === stableByNetwork[n]\n        );\n        const runePrice =\n          parseInt(stablePool.balance_asset) /\n          parseInt(stablePool.balance_rune);\n        const pools = thornodePools.reduce((ps, p) => {\n          const price =\n            runePrice * (parseInt(p.balance_rune) / parseInt(p.balance_asset));\n          const depth =\n            (parseInt(p.balance_rune) / Math.pow(10, 8)) * runePrice * 2;\n          ps[p.asset] = {\n            asset: p.asset,\n            status: p.status.toLowerCase(),\n            price: price,\n            depth: depth,\n            depthAsset: parseInt(p.balance_asset),\n            depthRune: parseInt(p.balance_rune),\n            units: parseInt(p.pool_units),\n            apy: 0,\n            volume: 0,\n          };\n          return ps;\n        }, {});\n\n        if (!gotPoolsFromMidgard) {\n          setPools(Object.values(pools).sort((a, b) => a.asset > b.asset));\n        }\n\n        midgardRequest(n, \"/pools\")\n          .then((midgardPools) => {\n            gotPoolsFromMidgard = true;\n            midgardPools.forEach((p) => {\n              if (!pools[p.asset]) return;\n              const volume =\n                ((parseFloat(p.volume24h) / Math.pow(10, 8)) *\n                  parseFloat(p.assetPriceUSD)) /\n                  parseFloat(p.assetPrice) || 0;\n              pools[p.asset].apy = parseFloat(p.poolAPY);\n              pools[p.asset].volume = volume;\n            });\n            setPools(Object.values(pools).sort((a, b) => a.asset > b.asset));\n          })\n          .catch(() => {\n            setPools(Object.values(pools).sort((a, b) => a.asset > b.asset));\n          });\n      });\n      midgardRequest(n, \"/stats\").then(setStats);\n    };\n    refresh();\n    const handle = setInterval(refresh, 15000);\n    return () => clearInterval(handle);\n  }, [wallet?.network]);\n\n  function onConfigureAddress() {\n    setModal({ type: \"configureAddress\" });\n  }\n\n  function onUpdateWorkspace(update, path) {\n    if (path.length === 0) {\n      selectedWorkspace.root = update(selectedWorkspace.root);\n    } else {\n      const parent = path.slice(0, -1).reduce((parent, leaf) => {\n        return parent[leaf];\n      }, selectedWorkspace.root);\n      const tail = path[path.length - 1];\n      let node = parent ? parent[tail] : selectedWorkspace.root;\n      node = update(node);\n      if (!node) {\n        Object.assign(\n          parent,\n          merge(parent[nodeSiblingNameMap[tail]], { size: parent.size })\n        );\n      } else {\n        parent[tail] = node;\n      }\n    }\n\n    workspaces[selectedWorkspaceIndex] = merge({}, selectedWorkspace);\n    setWorkspaces(workspaces.slice());\n    // debugging\n    window.globalWorkspaces = workspaces;\n  }\n\n  return (\n    <div>\n      <header className=\"header\">\n        <a className=\"header-brand\" href=\"/\">\n          thorbelt\n        </a>\n        <div className=\"header-workspaces\">\n          <WorkspacesNav\n            workspaces={workspaces}\n            setWorkspaces={setWorkspaces}\n            selectedWorkspaceIndex={selectedWorkspaceIndex}\n            setSelectedWorkspaceIndex={setSelectedWorkspaceIndex}\n          />\n        </div>\n        <div className=\"nav nav-right\">\n          <a className=\"nav-text text-primary\" onClick={onConfigureAddress}>\n            {wallet\n              ? formatAddress(wallet.address) + \" (\" + wallet.network + \")\"\n              : \"(no wallet connected)\"}\n          </a>\n        </div>\n      </header>\n      <div className=\"workspace\">\n        <Node\n          {...selectedWorkspace.root}\n          path={[]}\n          updateWorkspace={onUpdateWorkspace}\n        />\n      </div>\n      {modal.type === \"configureAddress\" ? (\n        <ModalConfigureAddress onClose={() => setModal({})} />\n      ) : null}\n    </div>\n  );\n}\n\nfunction WorkspacesNav({\n  workspaces,\n  setWorkspaces,\n  selectedWorkspaceIndex,\n  setSelectedWorkspaceIndex,\n}) {\n  function onAdd(e) {\n    e.preventDefault();\n    setWorkspaces((workspaces) => {\n      workspaces = workspaces.concat({\n        name: \"new workspace\",\n        root: { type: \"node\", size: 100, data: { type: \"empty\" } },\n      });\n      return workspaces;\n    });\n  }\n  function onRemove(e) {\n    e.preventDefault();\n    setWorkspaces((workspaces) => {\n      workspaces.splice(selectedWorkspaceIndex, 1);\n      return workspaces.splice();\n    });\n  }\n  function onRename(e) {\n    e.preventDefault();\n    const newName = prompt(\"New Name\", workspaces[selectedWorkspaceIndex].name);\n    if (!newName) return;\n    setWorkspaces((workspaces) => {\n      const i = selectedWorkspaceIndex;\n      workspaces[i] = { ...workspaces[i], name: newName };\n      return workspaces.slice();\n    });\n  }\n  function onSave(e) {\n    e.preventDefault();\n    localStorage.workspaces = JSON.stringify(workspaces);\n  }\n\n  return (\n    <div className=\"workspaces-nav\">\n      <div className=\"workspaces-nav-current\">\n        {workspaces[selectedWorkspaceIndex].name}\n      </div>\n      <div className=\"workspaces-nav-dropdown\">\n        {workspaces.map((w, i) => (\n          <a\n            key={i}\n            onClick={() => setSelectedWorkspaceIndex(i)}\n            className={selectedWorkspaceIndex === i ? \"is-active\" : \"\"}\n          >\n            {w.name}\n          </a>\n        ))}\n        <a onClick={onAdd} title=\"add\">\n          <Icon name=\"plus\" /> add\n        </a>\n        <a onClick={onRemove} title=\"delete\">\n          <Icon name=\"trash\" /> delete\n        </a>\n        <a onClick={onRename} title=\"rename\">\n          <Icon name=\"edit\" /> rename\n        </a>\n        <a onClick={onSave} title=\"save\">\n          <Icon name=\"save\" /> save\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}