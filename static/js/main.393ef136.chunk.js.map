{"version":3,"sources":["utils/index.js","constants.js","components/icon.js","components/box.js","components/nodeEmpty.js","components/nodeStats.js","components/table.js","components/nodePools.js","components/nodeWallet.js","components/nodeChart.js","components/nodeHistory.js","components/nodeManualTransaction.js","components/node.js","components/modalConfigureAddress.js","App.js","index.js"],"names":["state","stateListeners","useGlobalState","key","alt","useState","value","setValue","useEffect","onChange","push","splice","indexOf","forEach","fn","midgardRequest","network","path","apiRequest","thornodeRequest","api","fetch","then","res","a","status","Error","text","json","merge","o1","o2","Object","assign","padLeft","num","len","ch","numText","toString","i","length","formatAddress","address","slice","formatMoney","n","intp","parseFloat","toFixed","replace","decp","split","formatDate","dateString","d","Date","getFullYear","getMonth","getDate","join","formatTime","getHours","getMinutes","getSeconds","isValidThorAddress","match","explorerTransactionUrl","txId","explorerPoolUrl","pool","window","globalState","stableByNetwork","testnet","mainnet","defaultWorksapces","JSON","stringify","name","root","type","size","data","defaultWallets","selected","connected","watched","Icon","props","className","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","Box","title","updateWorkspace","children","right","onSelectType","node","onSplit","direction","top","bottom","left","onClick","bind","NodeEmpty","e","preventDefault","NodeStats","stats","parseInt","runeDepth","Math","pow","runePriceUSD","swapVolume","swapCount24h","dailyActiveUsers","swapCount30d","monthlyActiveUsers","swapCount","uniqueSwapperCount","impermanentLossProtectionPaid","Table","headers","rows","defaultSort","onSortChange","propsFilters","filters","propsOnFilterChange","onFilterChange","setFilters","id","sort","setSort","headerId","newValue","target","newFilters","onSort","newSort","filteredRows","filter","r","sortProp","b","v1","v2","reverse","map","h","class","style","v","NodePools","isSettingsOpen","setIsSettingsOpen","wallet","pools","onDataChange","onColumnChange","columns","hiddenColumns","c","checked","onToggleSettings","p","asset","href","assetValue","price","priceValue","apy","apyValue","depth","depthValue","volume","volumeValue","includes","NodeWallet","addressPools","setAddressPools","addressBalances","setAddressBalances","update","handle","setInterval","clearInterval","result","balances","denom","amount","valueValue","assetAmount","assetAmountValue","assetRemoved","runeAmount","runeRemoved","start","find","pp","amountAsset","assetAdded","assetWithdrawn","amountRune","runeAdded","runeWithdrawn","liquidityUnits","units","depthAsset","assetRemovedValue","runeAmountValue","runeRemovedValue","dateFirstAdded","NodeChart","chartRef","useRef","setAsset","range","setRange","prices","setPrices","stablePool","depthRune","loadData","queryMap","intervals","assetPriceUSD","assetPrice","el","current","lastChild","removeChild","rect","getBoundingClientRect","chart","createChart","width","height","layout","backgroundColor","textColor","fontSize","fontFamily","vertLines","color","visible","horzLines","timeScale","fixLeftEdge","timeVisible","addAreaSeries","bottomColor","lineColor","setData","time","startTime","setVisibleLogicalRange","from","to","display","flexDirection","padding","newAsset","marginRight","newRange","flex","ref","NodeHistory","addressActions","setAddressActions","actions","asset2","in","coins","out","transactionId","txID","date","timeValue","amountValue","thorchainTransaction","action","memo","recipient","Promise","resolve","reject","xfi","thorchain","request","method","params","decimals","err","NodeManualTransaction","error","setError","isLoading","setIsLoading","setTransactionId","percent","options","setOptions","computeMemo","limit","toUpperCase","assym","onOptionChange","newOptions","Number","isNaN","console","onSubmit","placeholder","min","max","step","disabled","Node","nodeRef","isDragging","setIsDragging","onMouseMove","nodes","querySelectorAll","percentWidth","clientX","clientY","round","flexBasis","concat","onMouseDown","onMouseUp","removeEventListener","addEventListener","renderNode","ModalConfigureAddress","onClose","wallets","setWallets","newWatchedAddress","setNewWatchedAddress","newWatchedLabel","setNewWatchedLabel","onSelect","w","onCopy","stopPropagation","navigator","clipboard","writeText","onRemove","index","_","handler","alert","accounts","log","message","newWallet","label","startsWith","gotPoolsFromMidgard","nodeSiblingNameMap","WorkspacesNav","workspaces","setWorkspaces","selectedWorkspaceIndex","setSelectedWorkspaceIndex","newName","prompt","localStorage","App","modal","setModal","setPools","setStats","parse","selectedWorkspace","updated","refresh","thornodePools","runePrice","balance_asset","balance_rune","reduce","ps","toLowerCase","pool_units","values","midgardPools","volume24h","poolAPY","catch","parent","leaf","tail","globalWorkspaces","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.393ef136.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst state = {};\nconst stateListeners = [];\nwindow.globalState = state;\n\nexport function useGlobalState(key, alt) {\n  const [value, setValue] = useState(state[key] || alt);\n  useEffect(() => {\n    const onChange = () => {\n      if (value !== state[key] || alt) {\n        setValue(state[key] || alt);\n      }\n    };\n    stateListeners.push(onChange);\n    return () => stateListeners.splice(stateListeners.indexOf(onChange), 1);\n  }, []);\n  const onSet = (value) => {\n    state[key] = value;\n    stateListeners.forEach((fn) => fn());\n  };\n  return [value, onSet];\n}\n\nexport function midgardRequest(network, path) {\n  return apiRequest(\"midgard\", network, \"/v2\" + path);\n}\n\nexport function thornodeRequest(network, path) {\n  return apiRequest(\"thornode\", network, path);\n}\n\nexport function apiRequest(api, network, path) {\n  return fetch(\n    `https://${\n      network === \"testnet\" ? \"testnet.\" : \"\"\n    }${api}.thorchain.info${path}`\n  ).then(async (res) => {\n    if (res.status !== 200) {\n      throw new Error(\n        \"Non 2xx response code: \" + res.status + \": \" + (await res.text())\n      );\n    }\n    return res.json();\n  });\n}\n\nexport function merge(o1, o2) {\n  return Object.assign(Object.assign({}, o1), o2);\n}\n\nexport function sortBy(fn, vs) {\n  return vs.sort((a, b) => {\n    const v1 = fn(a);\n    const v2 = fn(b);\n    return typeof v1 === \"number\" ? v1 - v2 : v1 > v2;\n  });\n}\n\nexport function padLeft(num, len, ch) {\n  var numText = num.toString();\n  for (var i = numText.length; i < len; i++) {\n    numText = ch + numText;\n  }\n  return numText;\n}\n\nexport function formatAddress(address) {\n  return address.slice(0, 8) + \"…\" + address.slice(-4);\n}\n\nexport function formatDecimal(val, precision) {\n  if (val === \"n/a\" || val === \"-\") return val;\n  val = parseFloat(val);\n  if (Number.isNaN(val)) val = 0;\n  return val.toFixed(precision);\n}\n\nexport function formatMoney(value, n = 0) {\n  value = parseFloat(value);\n  var intp = value.toFixed(0).replace(/(\\d)(?=(\\d{3})+$)/g, \"$1 \");\n  var decp = n > 0 ? \".\" + value.toFixed(n).split(\".\")[1] : \"\";\n  return intp + decp;\n}\n\nexport function formatDate(dateString) {\n  const d = new Date(dateString);\n  return [\n    d.getFullYear(),\n    padLeft(d.getMonth() - 1, 2, \"0\"),\n    padLeft(d.getDate(), 2, \"0\"),\n  ].join(\"-\");\n}\n\nexport function formatTime(dateString) {\n  const d = new Date(dateString);\n  return [\n    padLeft(d.getHours(), 2, \"0\"),\n    padLeft(d.getMinutes(), 2, \"0\"),\n    padLeft(d.getSeconds(), 2, \"0\"),\n  ].join(\":\");\n}\n\nexport function formatDatetime(dateString) {\n  const d = new Date(dateString);\n  return formatDate(d) + \" \" + formatTime(d);\n}\n\nexport function classForNumber(n) {\n  return n < 0 ? \"text-red\" : n > 0 ? \"text-green\" : \"\";\n}\n\nexport function isValidThorAddress(address) {\n  if (address.indexOf(\"thor\") === 0) {\n    return address.length === 43 && address.match(/^thor[a-z0-9]{39}$/);\n  } else if (address.indexOf(\"tthor\") === 0) {\n    return address.length === 44 && address.match(/^tthor[a-z0-9]{39}$/);\n  } else {\n    return false;\n  }\n}\n\nexport function explorerTransactionUrl(network, txId) {\n  if (!txId) return \"#\";\n  return `https://${\n    network === \"testnet\" ? \"testnet.\" : \"\"\n  }thorchain.net/#/txs/${txId}`;\n}\n\nexport function explorerPoolUrl(network, pool) {\n  if (!pool) return \"#\";\n  return `https://${\n    network === \"testnet\" ? \"testnet.\" : \"\"\n  }thorchain.net/#/pools/${pool}`;\n}\n","export const NODE_TYPES = {\n  empty: { id: \"empty\", name: \"empty\" },\n  stats: { id: \"stats\", name: \"stats\" },\n  pools: { id: \"pools\", name: \"pools\" },\n  chart: { id: \"chart\", name: \"chart\" },\n  wallet: { id: \"wallet\", name: \"wallet\" },\n  history: { id: \"history\", name: \"history\" },\n  manualTransaction: { id: \"manualTransaction\", name: \"manual transaction\" },\n};\n\nexport const stableByNetwork = {\n  testnet: 'BNB.BUSD-74E',\n  mainnet: 'BNB.BUSD-BD1',\n};\n\nexport const defaultWorksapces = JSON.stringify([\n  {\n    name: \"default\",\n    root: { type: \"node\", size: 100, data: { type: \"empty\" } },\n  },\n]);\n\nexport const defaultWallets = {\n  selected: null,\n  connected: null,\n  watched: [],\n};\n","import React from \"react\";\n\nfunction Icon(props) {\n  const className = \"icon h-6 w-6\";\n  switch (props.name) {\n    case \"plus\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\"\n          />\n        </svg>\n      );\n    case \"trash\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"\n          />\n        </svg>\n      );\n    case \"edit\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"\n          />\n        </svg>\n      );\n    case \"save\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M17 16v2a2 2 0 01-2 2H5a2 2 0 01-2-2v-7a2 2 0 012-2h2m3-4H9a2 2 0 00-2 2v7a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-1m-1 4l-3 3m0 0l-3-3m3 3V3\"\n          />\n        </svg>\n      );\n    case \"times\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M6 18L18 6M6 6l12 12\"\n          />\n        </svg>\n      );\n    case \"arrows-alt-v\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4\"\n          />\n        </svg>\n      );\n    case \"arrows-alt-h\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4\"\n          />\n        </svg>\n      );\n    case \"chevron-up\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M5 15l7-7 7 7\"\n          />\n        </svg>\n      );\n    case \"chevron-down\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={className}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M19 9l-7 7-7-7\"\n          />\n        </svg>\n      );\n    case \"cog\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n          className={className}\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"\n          />\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"\n          />\n        </svg>\n      );\n    default:\n      throw new Error(\"Unknow icon name: \" + props.name);\n  }\n}\n\nexport default Icon;\n","import React from \"react\";\n\nimport Icon from \"./icon\";\n\nexport default function Box({ title, path, updateWorkspace, children, right = null }) {\n  function onSelectType() {\n    updateWorkspace(\n      (node) => Object.assign(node, { data: { type: \"empty\" } }),\n      path\n    );\n  }\n\n  function onClose() {\n    if (path.length === 0) {\n      onSelectType();\n      return;\n    }\n    updateWorkspace(() => null, path);\n  }\n\n  function onSplit(direction) {\n    updateWorkspace((node) => {\n      if (direction === \"vertically\") {\n        return {\n          type: \"vsplit\",\n          size: node.size,\n          top: Object.assign(node, { size: 50 }),\n          bottom: { type: \"node\", size: 50, data: { type: \"empty\" } },\n        };\n      } else {\n        return {\n          type: \"hsplit\",\n          size: node.size,\n          left: Object.assign(node, { size: 50 }),\n          right: { type: \"node\", size: 50, data: { type: \"empty\" } },\n        };\n      }\n    }, path);\n  }\n\n  return (\n    <div className=\"box\">\n      <div className=\"box-header\">\n        <span\n          className=\"box-header-title\"\n          title=\"Change panel type\"\n          onClick={onSelectType}\n        >\n          {title}\n        </span>\n        <div className=\"box-header-icon\" title=\"Close\" onClick={onClose}>\n          <Icon name=\"times\" />\n        </div>\n        <div\n          className=\"box-header-icon\"\n          title=\"Split Horizontally\"\n          onClick={onSplit.bind(null, \"horizontally\")}\n        >\n          <Icon name=\"arrows-alt-h\" />\n        </div>\n        <div\n          className=\"box-header-icon\"\n          title=\"Split Vertically\"\n          onClick={onSplit.bind(null, \"vertically\")}\n        >\n          <Icon name=\"arrows-alt-v\" />\n        </div>\n        {right}\n      </div>\n      <div className=\"box-contents\">{children}</div>\n    </div>\n  );\n}\n","import { merge } from \"../utils\";\nimport Box from \"./box\";\n\nexport default function NodeEmpty({ path, updateWorkspace }) {\n  function onSelectType(type, e) {\n    e.preventDefault();\n    let update = (node) => merge(node, { data: { type: type } });\n    updateWorkspace(update, path);\n  }\n\n  return (\n    <Box title=\"Empty\" path={path} updateWorkspace={updateWorkspace}>\n      <div>\n        <br />\n        <p className=\"text-center\">select a panel type:</p>\n        <div className=\"node-empty\">\n          <button className=\"button\" onClick={onSelectType.bind(null, \"stats\")}>\n            <strong>stats.</strong>\n            <span>global thorchain stats.</span>\n          </button>\n          <button className=\"button\" onClick={onSelectType.bind(null, \"pools\")}>\n            <strong>pools.</strong>\n            <span>list of thorchain pools.</span>\n          </button>\n          <button\n            className=\"button\"\n            onClick={onSelectType.bind(null, \"wallet\")}\n          >\n            <strong>wallet.</strong>\n            <span>your rune, synth and lp balances.</span>\n          </button>\n          <button className=\"button\" onClick={onSelectType.bind(null, \"chart\")}>\n            <strong>chart.</strong>\n            <span>price chart for a pool.</span>\n          </button>\n          <button\n            className=\"button\"\n            onClick={onSelectType.bind(null, \"history\")}\n          >\n            <strong>history.</strong>\n            <span>action history for current address.</span>\n          </button>\n          <button\n            className=\"button\"\n            onClick={onSelectType.bind(null, \"manualTransaction\")}\n          >\n            <strong>manual transaction.</strong>\n            <span>send in a manual thorchain transaction.</span>\n          </button>\n        </div>\n      </div>\n    </Box>\n  );\n}\n","import { formatMoney, useGlobalState } from \"../utils\";\nimport Box from \"./box\";\n\nexport default function NodeStats({ path, updateWorkspace }) {\n  const [stats] = useGlobalState(\"stats\");\n  return (\n    <Box title=\"Stats\" path={path} updateWorkspace={updateWorkspace}>\n      {stats ? (\n        <div className=\"node-empty\">\n          <button className=\"button\">\n            <strong className=\"text-primary\">\n              $\n              {formatMoney(\n                ((parseInt(stats.runeDepth) * 2) / Math.pow(10, 8)) *\n                  parseFloat(stats.runePriceUSD)\n              )}\n            </strong>\n            <span>total liquidity</span>\n          </button>\n          <button className=\"button\">\n            <strong>\n              $\n              {formatMoney(\n                (parseInt(stats.swapVolume) / Math.pow(10, 8)) *\n                  parseFloat(stats.runePriceUSD)\n              )}\n            </strong>\n            <span>total swap volume</span>\n          </button>\n          <button className=\"button\">\n            <strong>{formatMoney(stats.swapCount24h)}</strong>\n            <span>24h swap count</span>\n          </button>\n          <button className=\"button\">\n            <strong>{formatMoney(stats.dailyActiveUsers)}</strong>\n            <span>24h active users</span>\n          </button>\n          <button className=\"button\">\n            <strong>{formatMoney(stats.swapCount30d)}</strong>\n            <span>30d swap count</span>\n          </button>\n          <button className=\"button\">\n            <strong>{formatMoney(stats.monthlyActiveUsers)}</strong>\n            <span>30d active users</span>\n          </button>\n          <button className=\"button\">\n            <strong>{formatMoney(stats.swapCount)}</strong>\n            <span>total swap count</span>\n          </button>\n          <button className=\"button\">\n            <strong>{formatMoney(stats.uniqueSwapperCount)}</strong>\n            <span>unique users</span>\n          </button>\n          <button className=\"button\">\n            <strong>${formatMoney(stats.runePriceUSD, 2)}</strong>\n            <span>rune price</span>\n          </button>\n          <button className=\"button\">\n            <strong>\n              $\n              {formatMoney(\n                (parseFloat(stats.impermanentLossProtectionPaid) /\n                  Math.pow(10, 8)) *\n                  parseFloat(stats.runePriceUSD)\n              )}\n            </strong>\n            <span>il paid</span>\n          </button>\n        </div>\n      ) : (\n        \"loading...\"\n      )}\n    </Box>\n  );\n}\n","import { useState } from \"react\";\nimport { merge, sortBy } from \"../utils\";\n\nexport default function Table({\n  headers,\n  rows,\n  defaultSort,\n  onSortChange,\n  filters: propsFilters,\n  onFilterChange: propsOnFilterChange,\n}) {\n  const [filters, setFilters] = useState(propsFilters || {});\n  const [sort, setSort] = useState(defaultSort || \"+\" + headers[0].id);\n\n  function onFilterChange(headerId, e) {\n    let newValue = null;\n    if (e.target.value !== \"all\") {\n      newValue = e.target.value;\n    }\n    const newFilters = merge(filters, { [headerId]: newValue });\n    setFilters(newFilters);\n    if (propsOnFilterChange) {\n      propsOnFilterChange(newFilters);\n    }\n  }\n\n  function onSort(headerId) {\n    let newSort;\n    if (sort && sort.slice(1) === headerId) {\n      newSort = (sort[0] === \"+\" ? \"-\" : \"+\") + sort.slice(1);\n    } else {\n      newSort = \"+\" + headerId;\n    }\n    setSort(newSort);\n    if (onSortChange) onSortChange(newSort);\n  }\n\n  let filteredRows = rows.filter((r) => {\n    for (let i in filters) {\n      if (filters[i]) {\n        if (r[i] !== filters[i]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  });\n  let sortProp = sort.slice(1);\n  filteredRows = sortBy(\n    (r) => (sortProp + \"Value\" in r ? r[sortProp + \"Value\"] : r[sortProp]),\n    filteredRows\n  );\n  if (sort[0] === \"-\") filteredRows = filteredRows.reverse();\n\n  const valuesForFilter = (key) => {\n    const uniq = (e, i, a) => a.indexOf(e) === i;\n    return rows\n      .map((r) => r[key + \"Value\"] || r[key])\n      .filter(uniq)\n      .sort();\n  };\n\n  return (\n    <table className=\"trading-table\">\n      <thead>\n        <tr>\n          {headers.map((h) => (\n            <th key={h.id} className={h.class} style={h.style || {}}>\n              {h.filter ? (\n                <select\n                  onChange={onFilterChange.bind(null, h.id)}\n                  value={filters[h.id] || \"all\"}\n                >\n                  <option value=\"all\">all</option>\n                  {valuesForFilter(h.id).map((v) => (\n                    <option key={v} value={v}>\n                      {v}\n                    </option>\n                  ))}\n                </select>\n              ) : null}\n            </th>\n          ))}\n        </tr>\n        <tr>\n          {headers.map((h) => (\n            <th\n              key={h.id}\n              className={h.class}\n              style={h.style || {}}\n              onClick={onSort.bind(null, h.id)}\n            >\n              {sort.slice(1) === h.id ? sort[0] : \"\"}\n              {h.name || h.id}\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {filteredRows.map((r, i) => (\n          <tr key={i}>\n            {headers.map((h) => (\n              <td\n                key={h.id}\n                className={h.class + \" \" + r[h.id + \"Class\"] || \"\"}\n                style={h.style || {}}\n                title={r[h.id + \"Title\"] || \"\"}\n              >\n                {r[h.id]}\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { useState } from \"react\";\nimport { merge, formatMoney, useGlobalState, explorerPoolUrl } from \"../utils\";\nimport Box from \"./box\";\nimport Icon from \"./icon\";\nimport Table from \"./table\";\n\nexport default function NodePools({ data, path, updateWorkspace }) {\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [{ selected: wallet }] = useGlobalState(\"wallets\", {});\n  const [pools] = useGlobalState(\"pools\", []);\n  const network = wallet ? wallet.network : \"mainnet\";\n\n  function onDataChange(key, value) {\n    const updateFn = (n) => merge(n, { data: merge(n.data, { [key]: value }) });\n    updateWorkspace(updateFn, path);\n  }\n  function onColumnChange(headerId, e) {\n    const columns = (data.hiddenColumns || []).filter((c) => c !== headerId);\n    if (!e.target.checked) columns.push(headerId);\n    onDataChange(\"hiddenColumns\", columns);\n  }\n  function onToggleSettings() {\n    setIsSettingsOpen(!isSettingsOpen);\n  }\n\n  const headers = [\n    { id: \"asset\", filter: true },\n    { id: \"status\", filter: true },\n    { id: \"price\", class: \"text-right\" },\n    { id: \"apy\", class: \"text-right\" },\n    { id: \"depth\", class: \"text-right\" },\n    { id: \"volume\", name: \"volume (24h)\", class: \"text-right\" },\n  ];\n  const rows = pools.map((p) => {\n    return {\n      asset: (\n        <a target=\"_blank\" href={explorerPoolUrl(network, p.asset)}>\n          {p.asset}\n        </a>\n      ),\n      assetValue: p.asset,\n      status: p.status,\n      price: formatMoney(p.price, 2),\n      priceValue: p.price,\n      apy: formatMoney(p.apy * 100, 2),\n      apyValue: p.apy,\n      depth: formatMoney(p.depth),\n      depthValue: p.depth,\n      volume: formatMoney(p.volume),\n      volumeValue: p.volume,\n    };\n  });\n\n  return (\n    <Box\n      title=\"Pools\"\n      path={path}\n      updateWorkspace={updateWorkspace}\n      right={\n        <div\n          className=\"box-header-icon\"\n          title=\"Settings\"\n          onClick={onToggleSettings}\n        >\n          <Icon name=\"cog\" />\n        </div>\n      }\n    >\n      {!isSettingsOpen ? (\n        <Table\n          headers={headers.filter(\n            (h) => !(data.hiddenColumns || []).includes(h.id)\n          )}\n          rows={rows}\n          filters={data.filters}\n          onFilterChange={onDataChange.bind(null, \"filters\")}\n          defaultSort={data.sort}\n          onSortChange={onDataChange.bind(null, \"sort\")}\n        />\n      ) : (\n        <div className=\"p-2\">\n          <div className=\"row mb-4\">\n            <div className=\"text-lg text-bold\">panel settings</div>\n            <div className=\"text-right\">\n              <a onClick={onToggleSettings}>close</a>\n            </div>\n          </div>\n          <div className=\"mb-2 text-bold\">columns</div>\n          {headers.map((h) => (\n            <div className=\"\" key={h.id}>\n              <input\n                type=\"checkbox\"\n                className=\"mr-2\"\n                checked={!(data.hiddenColumns || []).includes(h.id)}\n                onChange={onColumnChange.bind(null, h.id)}\n              />\n              {h.name || h.id}\n            </div>\n          ))}\n        </div>\n      )}\n    </Box>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport {\n  merge,\n  formatDate,\n  formatMoney,\n  useGlobalState,\n  midgardRequest,\n  thornodeRequest,\n} from \"../utils\";\nimport Box from \"./box\";\nimport Icon from \"./icon\";\nimport Table from \"./table\";\n\nexport default function NodeWallet({ data, path, updateWorkspace }) {\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [{ selected: wallet }] = useGlobalState(\"wallets\", {});\n  const [stats] = useGlobalState(\"stats\");\n  const [pools] = useGlobalState(\"pools\", []);\n  const [addressPools, setAddressPools] = useState([]);\n  const [addressBalances, setAddressBalances] = useState([]);\n\n  function onDataChange(key, value) {\n    const updateFn = (n) => merge(n, { data: merge(n.data, { [key]: value }) });\n    updateWorkspace(updateFn, path);\n  }\n  function onColumnChange(headerId, e) {\n    const columns = (data.hiddenColumns || []).filter((c) => c !== headerId);\n    if (!e.target.checked) columns.push(headerId);\n    onDataChange(\"hiddenColumns\", columns);\n  }\n  function onToggleSettings() {\n    setIsSettingsOpen(!isSettingsOpen);\n  }\n\n  useEffect(() => {\n    if (!wallet?.address) return;\n    function update() {\n      midgardRequest(wallet.network, \"/member/\" + wallet.address).then(\n        (result) => setAddressPools(result.pools),\n        () => {}\n      );\n      thornodeRequest(\n        wallet.network,\n        \"/cosmos/bank/v1beta1/balances/\" + wallet.address\n      ).then(\n        (result) => setAddressBalances(result.balances),\n        () => {}\n      );\n    }\n    setAddressPools([]);\n    update();\n    const handle = setInterval(update, 5 * 1000);\n    return () => clearInterval(handle);\n  }, [wallet]);\n\n  const headers = [\n    { id: \"asset\", filter: true },\n    { id: \"value\", class: \"text-right\" },\n    { id: \"assetAmount\", name: \"asset\", class: \"text-right\" },\n    { id: \"assetRemoved\", name: \"-asset\", class: \"text-right\" },\n    { id: \"runeAmount\", name: \"rune\", class: \"text-right\" },\n    { id: \"runeRemoved\", name: \"-rune\", class: \"text-right\" },\n    { id: \"start\", name: \"first added\", class: \"text-right\" },\n  ];\n  const rows = [];\n  addressBalances.forEach((b) => {\n    if (!stats) return;\n    const price = b.denom === \"rune\" ? parseFloat(stats.runePriceUSD) : 0;\n    const amount = parseInt(b.amount) / Math.pow(10, 8);\n    rows.push({\n      asset: b.denom,\n      value: formatMoney(amount * price),\n      valueValue: amount * price,\n      assetAmount: formatMoney(amount, 2),\n      assetAmountValue: amount,\n      assetRemoved: \"\",\n      runeAmount: \"\",\n      runeRemoved: \"\",\n      start: \"\",\n    });\n  });\n  addressPools.forEach((p) => {\n    const pool = pools.find((pp) => pp.asset === p.pool);\n    if (!pool) return;\n    const amountAsset =\n      (parseInt(p.assetAdded) - parseInt(p.assetWithdrawn)) / Math.pow(10, 8);\n    const amountRune =\n      (parseInt(p.runeAdded) - parseInt(p.runeWithdrawn)) / Math.pow(10, 8);\n    const value =\n      (parseInt(p.liquidityUnits) / pool.units) *\n      ((pool.depthAsset * 2) / Math.pow(10, 8)) *\n      pool.price;\n    rows.push({\n      asset: p.pool + \" Pool\",\n      value: formatMoney(value),\n      valueValue: value,\n      assetAmount: formatMoney(amountAsset, 2),\n      assetAmountValue: amountAsset,\n      assetRemoved: formatMoney(\n        parseInt(p.assetWithdrawn) / Math.pow(10, 8),\n        2\n      ),\n      assetRemovedValue: parseInt(p.assetWithdrawn),\n      runeAmount: formatMoney(amountRune, 1),\n      runeAmountValue: parseInt(amountRune),\n      runeRemoved: formatMoney(parseInt(p.runeWithdrawn) / Math.pow(10, 8), 1),\n      runeRemovedValue: parseInt(p.assetWithdrawn),\n      start: formatDate(parseInt(p.dateFirstAdded) * 1000),\n    });\n  });\n\n  return (\n    <Box\n      title=\"Wallet\"\n      path={path}\n      updateWorkspace={updateWorkspace}\n      right={\n        <div\n          className=\"box-header-icon\"\n          title=\"Settings\"\n          onClick={onToggleSettings}\n        >\n          <Icon name=\"cog\" />\n        </div>\n      }\n    >\n      {!isSettingsOpen ? (\n        <Table\n          headers={headers.filter(\n            (h) => !(data.hiddenColumns || []).includes(h.id)\n          )}\n          rows={rows}\n          filters={data.filters}\n          onFilterChange={onDataChange.bind(null, \"filters\")}\n          defaultSort={data.sort}\n          onSortChange={onDataChange.bind(null, \"sort\")}\n        />\n      ) : (\n        <div className=\"p-2\">\n          <div className=\"row mb-4\">\n            <div className=\"text-lg text-bold\">panel settings</div>\n            <div className=\"text-right\">\n              <a onClick={onToggleSettings}>close</a>\n            </div>\n          </div>\n          <div className=\"mb-2 text-bold\">columns</div>\n          {headers.map((h) => (\n            <div className=\"\" key={h.id}>\n              <input\n                type=\"checkbox\"\n                className=\"mr-2\"\n                checked={!(data.hiddenColumns || []).includes(h.id)}\n                onChange={onColumnChange.bind(null, h.id)}\n              />\n              {h.name || h.id}\n            </div>\n          ))}\n        </div>\n      )}\n    </Box>\n  );\n}\n","import { useRef, useState, useEffect } from \"react\";\nimport { createChart } from \"lightweight-charts\";\nimport { merge, formatMoney, midgardRequest, useGlobalState } from \"../utils\";\nimport { stableByNetwork } from \"../constants\";\nimport Box from \"./box\";\n\nexport default function NodeChart({ data, path, updateWorkspace }) {\n  const chartRef = useRef();\n  const [{ selected: wallet }] = useGlobalState(\"wallets\", {});\n  const [pools] = useGlobalState(\"pools\", []);\n  const [asset, setAsset] = useState(data.asset || \"BTC.BTC\");\n  const [range, setRange] = useState(data.range || \"1d\");\n  const [prices, setPrices] = useState();\n  const pool = pools.find(p => p.asset === asset);\n  let price = pool ? pool.price : 0;\n  if (asset === 'THOR.RUNE') {\n    const stablePool = pools.find(p => p.asset === stableByNetwork[wallet ? wallet.network : 'mainnet']);\n    if (stablePool) price = stablePool.depthAsset/stablePool.depthRune;\n  }\n\n  function loadData(asset, range) {\n    const queryMap = {\n      \"1d\": \"interval=5min&count=288\",\n      \"1w\": \"interval=hour&count=168\",\n      \"3m\": \"interval=day&count=90\",\n      \"1y\": \"interval=day&count=365\",\n    };\n    const network = wallet ? wallet.network : 'mainnet';\n    if (asset === \"THOR.RUNE\") {\n      const usdAsset = stableByNetwork[network];\n      midgardRequest(\n        network,\n        \"/history/depths/\" + usdAsset + \"?\" + queryMap[range]\n      ).then(\n        (result) =>\n          setPrices(\n            result.intervals.map((i) =>\n              merge(i, {\n                assetPriceUSD: 1 / parseFloat(i.assetPrice),\n              })\n            )\n          ),\n        () => {}\n      );\n    } else {\n      midgardRequest(\n        network,\n        \"/history/depths/\" + asset + \"?\" + queryMap[range]\n      ).then(\n        (result) => setPrices(result.intervals),\n        () => {}\n      );\n    }\n  }\n\n  function onAssetChange(e) {\n    const newAsset = e.target.value;\n    setAsset(newAsset);\n    const updateFn = (n) =>\n      merge(n, { data: merge(n.data, { asset: newAsset }) });\n    updateWorkspace(updateFn, path);\n  }\n  function onRangeChange(e) {\n    const newRange = e.target.value;\n    setRange(newRange);\n    const updateFn = (n) =>\n      merge(n, { data: merge(n.data, { range: newRange }) });\n    updateWorkspace(updateFn, path);\n  }\n\n  useEffect(() => {\n    loadData(asset, range);\n    const handle = setInterval(() => loadData(asset, range), 15000);\n    return () => clearInterval(handle);\n  }, [asset, range]);\n  useEffect(() => {\n    const el = chartRef.current;\n    if (!el || !prices) return;\n    while (el.lastChild) {\n      el.removeChild(el.lastChild);\n    }\n    const rect = el.getBoundingClientRect();\n    const chart = createChart(el, {\n      width: rect.width,\n      height: rect.height,\n      layout: {\n        backgroundColor: \"#111827\",\n        textColor: \"#ffffff\",\n        fontSize: 12,\n        fontFamily: \"IBM Plex Mono\",\n      },\n      vertLines: {\n        color: \"rgba(40,40,40,0.2)\",\n        style: 1,\n        visible: true,\n      },\n      horzLines: {\n        color: \"rgba(40,40,40,0.2)\",\n        style: 1,\n        visible: true,\n      },\n      timeScale: {\n        fixLeftEdge: true,\n        timeVisible: true,\n      },\n    });\n    const series = chart.addAreaSeries({\n      bottomColor: \"rgba(35, 220, 200, 0.5)\",\n      lineColor: \"rgba(35, 220, 200, 1)\",\n    });\n    series.setData(\n      prices.map((p) => ({\n        time: parseInt(p.startTime),\n        value: parseFloat(p.assetPriceUSD),\n      }))\n    );\n    chart.timeScale().setVisibleLogicalRange({\n      from: 0,\n      to: prices.length,\n    });\n  }, [chartRef.current, prices]);\n\n  return (\n    <Box title=\"Chart\" path={path} updateWorkspace={updateWorkspace}>\n      <div style={{ display: \"flex\", flexDirection: \"column\", height: \"100%\" }}>\n        <div style={{ display: \"flex\", padding: \"4px\" }}>\n          <select\n            value={asset}\n            onChange={onAssetChange}\n            style={{ padding: \"4px 8px\", width: \"100px\", marginRight: \"8px\" }}\n          >\n            <option value=\"THOR.RUNE\">THOR.RUNE</option>\n            {pools\n              .sort((a, b) => a.depth - b.depth)\n              .map((p) => (\n                <option value={p.asset} key={p.asset}>\n                  {p.asset.slice(0, 12)}\n                </option>\n              ))}\n          </select>\n          <select\n            value={range}\n            onChange={onRangeChange}\n            style={{ padding: \"4px 8px\", width: \"100px\" }}\n          >\n            <option value=\"1d\">past day</option>\n            <option value=\"1w\">past week</option>\n            <option value=\"3m\">past 3 months</option>\n            <option value=\"1y\">past year</option>\n          </select>\n          <div style={{ flex: \"1\" }} />\n          <div>\n            {formatMoney(price, 3)}\n          </div>\n        </div>\n        <div style={{ flex: \"1\" }} ref={chartRef} />\n      </div>\n    </Box>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport {\n  merge,\n  formatDate,\n  formatTime,\n  formatMoney,\n  useGlobalState,\n  midgardRequest,\n  explorerTransactionUrl,\n} from \"../utils\";\nimport Box from \"./box\";\nimport Icon from \"./icon\";\nimport Table from \"./table\";\n\nexport default function NodeHistory({ data, path, updateWorkspace }) {\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [{ selected: wallet }] = useGlobalState(\"wallets\", {});\n  const [pools] = useGlobalState(\"pools\");\n  const [addressActions, setAddressActions] = useState([]);\n\n  function onDataChange(key, value) {\n    const updateFn = (n) => merge(n, { data: merge(n.data, { [key]: value }) });\n    updateWorkspace(updateFn, path);\n  }\n  function onColumnChange(headerId, e) {\n    const columns = (data.hiddenColumns || []).filter((c) => c !== headerId);\n    if (!e.target.checked) columns.push(headerId);\n    onDataChange(\"hiddenColumns\", columns);\n  }\n  function onToggleSettings() {\n    setIsSettingsOpen(!isSettingsOpen);\n  }\n\n  useEffect(() => {\n    if (!wallet?.address) return;\n    setAddressActions([]);\n    midgardRequest(\n      wallet.network,\n      \"/actions?limit=50&offset=0&address=\" + wallet.address\n    ).then(\n      (result) => setAddressActions(result.actions),\n      () => {}\n    );\n  }, [wallet]);\n\n  const headers = [\n    { id: \"time\", class: \"w-datetime\" },\n    { id: \"type\", filter: true },\n    { id: \"status\", filter: true },\n    { id: \"asset\", filter: true },\n    { id: \"asset2\", filter: true },\n    { id: \"amount\", class: \"text-right\" },\n  ];\n  const rows = [];\n  addressActions.forEach((a) => {\n    let asset = \"\";\n    let asset2 = \"\";\n    let amount = 0;\n    if (a.type === \"switch\") {\n      asset = a.in[0].coins[0].asset;\n      asset2 = a.out[0].coins[0].asset;\n      amount = parseInt(a.out[0].coins[0].amount) / Math.pow(10, 8);\n    }\n    if (a.type === \"addLiquidity\") {\n      asset = a.pools[0];\n      asset2 = a.in[0].coins[0].asset;\n      amount = parseInt(a.in[0].coins[0].amount) / Math.pow(10, 8);\n    }\n    if (a.type === \"withdraw\") {\n      asset = a.pools[0];\n      asset2 = a.out[0].coins[0].asset;\n      amount = parseInt(a.out[0].coins[0].amount) / Math.pow(10, 8);\n    }\n    if (a.type === \"swap\") {\n      asset = a.in[0].coins[0].asset;\n      if (a.out.length > 0) {\n        asset2 = a.out[0].coins[0].asset;\n        amount = parseInt(a.out[0].coins[0].amount) / Math.pow(10, 8);\n      }\n    }\n    let transactionId = \"\";\n    if (a.out.length > 0) {\n      transactionId = a.out[0].txID;\n    }\n    if (a.in.length > 0) {\n      transactionId = a.in[0].txID;\n    }\n    rows.push({\n      time: (\n        <a\n          target=\"_blank\"\n          href={explorerTransactionUrl(wallet.network, transactionId)}\n        >\n          {formatDate(parseInt(a.date) / 1000000).slice(2) +\n            \" \" +\n            formatTime(parseInt(a.date) / 1000000)}\n        </a>\n      ),\n      timeValue: parseInt(a.date),\n      type: a.type,\n      status: a.status,\n      asset: asset,\n      asset2: asset2,\n      amount: formatMoney(amount, 2),\n      amountValue: amount,\n    });\n  });\n  return (\n    <Box\n      title=\"History\"\n      path={path}\n      updateWorkspace={updateWorkspace}\n      right={\n        <div\n          className=\"box-header-icon\"\n          title=\"Settings\"\n          onClick={onToggleSettings}\n        >\n          <Icon name=\"cog\" />\n        </div>\n      }\n    >\n      {!isSettingsOpen ? (\n        <Table\n          headers={headers.filter(\n            (h) => !(data.hiddenColumns || []).includes(h.id)\n          )}\n          rows={rows}\n          filters={data.filters}\n          onFilterChange={onDataChange.bind(null, \"filters\")}\n          defaultSort={data.sort || \"-time\"}\n          onSortChange={onDataChange.bind(null, \"sort\")}\n        />\n      ) : (\n        <div className=\"p-2\">\n          <div className=\"row mb-4\">\n            <div className=\"text-lg text-bold\">panel settings</div>\n            <div className=\"text-right\">\n              <a onClick={onToggleSettings}>close</a>\n            </div>\n          </div>\n          <div className=\"mb-2 text-bold\">columns</div>\n          {headers.map((h) => (\n            <div className=\"\" key={h.id}>\n              <input\n                type=\"checkbox\"\n                className=\"mr-2\"\n                checked={!(data.hiddenColumns || []).includes(h.id)}\n                onChange={onColumnChange.bind(null, h.id)}\n              />\n              {h.name || h.id}\n            </div>\n          ))}\n        </div>\n      )}\n    </Box>\n  );\n}\n","import { useState } from \"react\";\nimport {\n  merge,\n  explorerTransactionUrl,\n  isValidThorAddress,\n  useGlobalState,\n} from \"../utils\";\nimport Box from \"./box\";\n\nfunction thorchainTransaction(\n  action,\n  { from, memo, asset, recipient, amount }\n) {\n  return new Promise((resolve, reject) => {\n    if (!window.xfi || !window.xfi.thorchain || !from) {\n      return reject(new Error(\"xdefi wallet not connected\"));\n    }\n    /*\n    const handle = setTimeout(() => {\n      reject(new Error(\"transaction timeout\"));\n    }, 60000);\n    */\n    window.xfi.thorchain.request(\n      {\n        method: action,\n        params: [\n          {\n            from,\n            memo,\n            asset,\n            recipient,\n            amount: { amount: amount, decimals: 8 },\n          },\n        ],\n      },\n      (err, result) => {\n        // clearTimeout(handle);\n        if (err) return reject(err);\n        resolve(result);\n      }\n    );\n  });\n}\n\nexport default function NodeManualTransaction({ data, path, updateWorkspace }) {\n  const [{ selected: wallet }] = useGlobalState(\"wallets\", {});\n  const [pools] = useGlobalState(\"pools\", []);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [transactionId, setTransactionId] = useState();\n  const [options, setOptions] = useState(\n    merge(\n      {\n        type: \"transfer\",\n        action: \"swap\",\n        percent: \"100\",\n      },\n      data.options || {}\n    )\n  );\n\n  function computeMemo() {\n    const { asset = \"\", address = \"\", limit = \"\", percent = \"\" } = options;\n    const p = parseInt(parseFloat(percent) * 100);\n    let memo = options.action.toUpperCase();\n    if (options.action === \"swap\") {\n      memo += `:${asset}:${address}:${limit}`;\n    } else if (options.action === \"add\") {\n      memo += `:${asset}:${address}`;\n    } else if (options.action === \"withdraw\") {\n      memo += `:${asset}:${p}${options.assym ? \":\" + options.assym : \"\"}`;\n    } else if (options.action === \"bond\" || options.action === \"leave\") {\n      memo += `:${address}`;\n    } else if (options.action === \"unbond\") {\n      memo += `:${address}:${p}`;\n    }\n    return memo;\n  }\n  function onOptionChange(key, value) {\n    const newOptions = merge(options, { [key]: value });\n    setOptions(newOptions);\n    const updateFn = (n) =>\n      merge(n, { data: merge(n.data, { options: newOptions }) });\n    updateWorkspace(updateFn, path);\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    setError(\"\");\n    setIsLoading(true);\n\n    if (!wallet?.address) {\n      return setError(\"no wallet connected\");\n    }\n    let amount = parseInt(parseFloat(options.amount) * Math.pow(10, 8));\n    if (Number.isNaN(amount)) {\n      return setError(\"amount is not a valid number\");\n    }\n    if (options.type === \"transfer\") {\n      if (!isValidThorAddress(options.address)) {\n        return setError(\"recipient address is not valid\");\n      }\n    } else if (options.type === \"deposit\") {\n      if ([\"withdraw\", \"unbond\", \"leave\"].includes(options.action)) {\n        if (amount) {\n          return setError(\"don't send an amount for \" + options.action);\n        }\n      }\n      if ([\"swap\", \"add\", \"withdraw\"].includes(options.action)) {\n        const p = pools.find((p) => p.asset === options.asset);\n        if (!p) {\n          return setError(\"selected asset is not valid\");\n        }\n      }\n    }\n    try {\n      setIsLoading(false);\n      if (options.type === \"transfer\") {\n        const txId = await thorchainTransaction(\"transfer\", {\n          from: wallet.address,\n          amount: amount,\n          recipient: options.address,\n          // asset: { chain: \"THOR\", symbol: \"RUNE\", ticker: \"RUNE\" },\n          // memo: \"\",\n        });\n        setTransactionId(txId);\n      } else if (options.type === \"deposit\") {\n        const memo = computeMemo();\n        const txId = await thorchainTransaction(\"deposit\", {\n          from: wallet.address,\n          amount: amount,\n          memo: memo,\n        });\n        setTransactionId(txId);\n      }\n\n      // clear some options to avoid mistakingly leaving as is in next transaction\n      const newOptions = merge(options, {\n        amount: \"\",\n        limit: \"\",\n        percent: \"100\",\n      });\n      setOptions(newOptions);\n      const updateFn = (n) =>\n        merge(n, { data: merge(n.data, { options: newOptions }) });\n      updateWorkspace(updateFn, path);\n    } catch (err) {\n      console.error(err);\n      setError(err.toString());\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <Box\n      title=\"Manual Transaction\"\n      path={path}\n      updateWorkspace={updateWorkspace}\n    >\n      <form className=\"p-2\" onSubmit={onSubmit}>\n        <div className=\"row mb-2\">\n          <div className=\"\">\n            <label>type</label>\n            <select\n              value={options.type}\n              onChange={(e) => onOptionChange(\"type\", e.target.value)}\n            >\n              <option value=\"transfer\">transfer</option>\n              <option value=\"deposit\">deposit</option>\n            </select>\n          </div>\n          <div className=\"\">\n            <label>input amount</label>\n            <input\n              type=\"text\"\n              value={options.amount || \"\"}\n              onChange={(e) => onOptionChange(\"amount\", e.target.value)}\n              placeholder=\"0.0\"\n            />\n          </div>\n        </div>\n        {options.type === \"deposit\" ? (\n          <div>\n            <div className=\"row mb-2\">\n              <div className=\"\">\n                <label>action</label>\n                <select\n                  value={options.action}\n                  onChange={(e) => onOptionChange(\"action\", e.target.value)}\n                >\n                  <option value=\"swap\">swap</option>\n                  <option value=\"add\">add</option>\n                  <option value=\"withdraw\">withdraw</option>\n                  <option value=\"bond\">bond</option>\n                  <option value=\"unbond\">unbond</option>\n                  <option value=\"leave\">leave</option>\n                </select>\n              </div>\n              {[\"swap\", \"add\", \"withdraw\"].includes(options.action) ? (\n                <div>\n                  <label>asset</label>\n                  <select\n                    value={options.asset || \"\"}\n                    onChange={(e) => onOptionChange(\"asset\", e.target.value)}\n                  >\n                    {pools.map((p) => (\n                      <option value={p.asset} key={p.asset}>\n                        {p.asset}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              ) : null}\n              {[\"bond\", \"unbond\", \"leave\"].includes(options.action) ? (\n                <div className=\"\">\n                  <label>address</label>\n                  <input\n                    type=\"text\"\n                    value={options.address || \"\"}\n                    onChange={(e) => onOptionChange(\"address\", e.target.value)}\n                    placeholder=\"e.g. thor1a2b3c...\"\n                  />\n                </div>\n              ) : null}\n            </div>\n            <div className=\"row mb-2\">\n              {[\"swap\", \"add\"].includes(options.action) ? (\n                <div className=\"\">\n                  <label>address (optional)</label>\n                  <input\n                    type=\"text\"\n                    value={options.address || \"\"}\n                    onChange={(e) => onOptionChange(\"address\", e.target.value)}\n                    placeholder=\"e.g. thor1a2b3c...\"\n                  />\n                </div>\n              ) : null}\n              {options.action === \"swap\" ? (\n                <div className=\"\">\n                  <label>limit</label>\n                  <input\n                    type=\"text\"\n                    value={options.limit || \"\"}\n                    onChange={(e) => onOptionChange(\"limit\", e.target.value)}\n                  />\n                </div>\n              ) : null}\n              {[\"withdraw\", \"unbond\"].includes(options.action) ? (\n                <div className=\"\">\n                  <label>percentage</label>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"100\"\n                    step=\"0.01\"\n                    value={options.percent || \"\"}\n                    onChange={(e) => onOptionChange(\"percent\", e.target.value)}\n                  />\n                </div>\n              ) : null}\n              {[\"withdraw\"].includes(options.action) ? (\n                <div>\n                  <label>assym. asset (optional)</label>\n                  <input\n                    type=\"text\"\n                    value={options.assym || \"\"}\n                    onChange={(e) => onOptionChange(\"assym\", e.target.value)}\n                    placeholder=\"e.g. THOR.RUNE\"\n                  />\n                </div>\n              ) : null}\n            </div>\n          </div>\n        ) : (\n          <div className=\"mb-2\">\n            <label>recipient address</label>\n            <input\n              type=\"text\"\n              value={options.address || \"\"}\n              onChange={(e) => onOptionChange(\"address\", e.target.value)}\n              placeholder=\"e.g. thor1a2b3c...\"\n            />\n          </div>\n        )}\n\n        {options.type === \"deposit\" ? (\n          <div className=\"truncate mb-2\">memo: {computeMemo()}</div>\n        ) : null}\n        {error ? <div className=\"text-red mb-2\">{error}</div> : null}\n        <button type=\"submit\" className=\"btn w-full mb-2\" disabled={isLoading}>\n          {isLoading ? \"loading...\" : \"submit\"}\n        </button>\n        {transactionId ? (\n          <div className=\"truncate\">\n            tx:{\" \"}\n            <a\n              href={explorerTransactionUrl(wallet.network, transactionId)}\n              target=\"_blank\"\n            >\n              {transactionId}\n            </a>\n          </div>\n        ) : null}\n      </form>\n    </Box>\n  );\n}\n","import React, { useRef, useState, useEffect } from \"react\";\nimport { merge } from \"../utils\";\nimport NodeEmpty from \"./nodeEmpty\";\nimport NodeStats from \"./nodeStats\";\nimport NodePools from \"./nodePools\";\nimport NodeWallet from \"./nodeWallet\";\nimport NodeChart from \"./nodeChart\";\nimport NodeHistory from \"./nodeHistory\";\nimport NodeManualTransaction from \"./nodeManualTransaction\";\n\nexport default function Node({\n  type,\n  size,\n  data,\n  path,\n  updateWorkspace,\n  top,\n  bottom,\n  left,\n  right,\n}) {\n  const nodeRef = useRef();\n  const [isDragging, setIsDragging] = useState(false);\n\n  const onMouseMove = (e) => {\n    let el = nodeRef.current;\n    let nodes = el.querySelectorAll(\".workspace-node\");\n    let rect = el.getBoundingClientRect();\n\n    let pos = type === \"hsplit\" ? e.clientX : e.clientY;\n    let edge = type === \"hsplit\" ? rect.left : rect.top;\n    let size = type === \"hsplit\" ? rect.width : rect.height;\n    let percentWidth = ((pos - edge) / size) * 100;\n    percentWidth = Math.min(85, Math.max(15, percentWidth));\n    percentWidth = Math.round(percentWidth / 5) * 5;\n    nodes[0].style.flexBasis = percentWidth + \"%\";\n    nodes[1].style.flexBasis = 100 - percentWidth + \"%\";\n\n    if (type === \"hsplit\") {\n      updateWorkspace(\n        (node) =>\n          merge(node, {\n            size: percentWidth,\n          }),\n        path.concat([\"left\"])\n      );\n      updateWorkspace(\n        (node) =>\n          merge(node, {\n            size: 100 - percentWidth,\n          }),\n        path.concat([\"right\"])\n      );\n    } else {\n      updateWorkspace(\n        (node) =>\n          merge(node, {\n            size: percentWidth,\n          }),\n        path.concat([\"top\"])\n      );\n      updateWorkspace(\n        (node) =>\n          merge(node, {\n            size: 100 - percentWidth,\n          }),\n        path.concat([\"bottom\"])\n      );\n    }\n  };\n  function onMouseDown() {\n    setIsDragging(true);\n  }\n  function onMouseUp() {\n    setIsDragging(false);\n    window.removeEventListener(\"mousemove\", onMouseMove);\n  }\n\n  useEffect(() => {\n    if (!isDragging) return;\n    window.addEventListener(\"mouseup\", onMouseUp);\n    window.addEventListener(\"mousemove\", onMouseMove);\n    return () => {\n      window.removeEventListener(\"mouseup\", onMouseUp);\n      window.removeEventListener(\"mousemove\", onMouseMove);\n    };\n  }, [isDragging]);\n\n  const renderNode = () => {\n    switch (data.type) {\n      case \"empty\":\n        return (\n          <NodeEmpty\n            data={data}\n            path={path}\n            updateWorkspace={updateWorkspace}\n          />\n        );\n      case \"stats\":\n        return (\n          <NodeStats\n            data={data}\n            path={path}\n            updateWorkspace={updateWorkspace}\n          />\n        );\n      case \"pools\":\n        return (\n          <NodePools\n            data={data}\n            path={path}\n            updateWorkspace={updateWorkspace}\n          />\n        );\n      case \"wallet\":\n        return (\n          <NodeWallet\n            data={data}\n            path={path}\n            updateWorkspace={updateWorkspace}\n          />\n        );\n      case \"chart\":\n        return (\n          <NodeChart\n            data={data}\n            path={path}\n            updateWorkspace={updateWorkspace}\n          />\n        );\n      case \"history\":\n        return (\n          <NodeHistory\n            data={data}\n            path={path}\n            updateWorkspace={updateWorkspace}\n          />\n        );\n      case \"manualTransaction\":\n        return (\n          <NodeManualTransaction\n            data={data}\n            path={path}\n            updateWorkspace={updateWorkspace}\n          />\n        );\n      default:\n        throw new Error(\"Unknown terminal node type: \" + data.type);\n    }\n  };\n  switch (type) {\n    case \"vsplit\":\n      return (\n        <div\n          ref={nodeRef}\n          className={\n            \"workspace-node workspace-vsplit \" +\n            (isDragging ? \"is-dragging\" : \"\")\n          }\n          style={{ flexBasis: size + \"%\" }}\n        >\n          <Node\n            {...top}\n            path={path.concat([\"top\"])}\n            updateWorkspace={updateWorkspace}\n          />\n          <div\n            className={\n              \"workspace-resize-handle \" + (isDragging ? \"is-dragging\" : \"\")\n            }\n            onMouseDown={onMouseDown}\n          />\n          <Node\n            {...bottom}\n            path={path.concat([\"bottom\"])}\n            updateWorkspace={updateWorkspace}\n          />\n        </div>\n      );\n    case \"hsplit\":\n      return (\n        <div\n          ref={nodeRef}\n          className={\n            \"workspace-node workspace-hsplit \" +\n            (isDragging ? \"is-dragging\" : \"\")\n          }\n          style={{ flexBasis: size + \"%\" }}\n        >\n          <Node\n            {...left}\n            path={path.concat([\"left\"])}\n            updateWorkspace={updateWorkspace}\n          />\n          <div\n            className={\n              \"workspace-resize-handle \" + (isDragging ? \"is-dragging\" : \"\")\n            }\n            onMouseDown={onMouseDown}\n          />\n          <Node\n            {...right}\n            path={path.concat([\"right\"])}\n            updateWorkspace={updateWorkspace}\n          />\n        </div>\n      );\n    case \"node\":\n      return (\n        <div\n          ref={nodeRef}\n          className=\"workspace-node\"\n          style={{ flexBasis: size + \"%\" }}\n        >\n          {renderNode()}\n        </div>\n      );\n    default:\n      throw new Error(\"Unknown node type: \" + type);\n  }\n}\n","import { useEffect, useState } from \"react\";\nimport { merge, formatAddress, useGlobalState } from \"../utils\";\nimport { defaultWallets } from \"../constants\";\n\nexport default function ModalConfigureAddress({ onClose }) {\n  const [wallets, setWallets] = useGlobalState('wallets', defaultWallets);\n  const [newWatchedAddress, setNewWatchedAddress] = useState('');\n  const [newWatchedLabel, setNewWatchedLabel] = useState('');\n\n  useEffect(() => {\n    const handler = (e) => { if (onClose && e.key === \"Escape\") onClose(); };\n    window.addEventListener(\"keyup\", handler);\n    return () => window.removeEventListener(\"keyup\", handler);\n  }, []);\n\n  function onConnectXdefi() {\n    if (!window.xfi || !window.xfi.thorchain) {\n      return alert('XDEFI is not installed!');\n    }\n    window.xfi.thorchain.request(\n      { method: \"request_accounts\", params: [] },\n      (err, accounts) => {\n        if (err) {\n          console.log(err);\n          return alert('Error connecting to XDEFI: ' + err.message);\n        }\n        const newWallet = {\n          type: 'xdefi',\n          address: accounts[0],\n          network: window.xfi.thorchain.network,\n        };\n        setWallets(merge(wallets, { connected: newWallet, selected: newWallet }));\n      }\n    );\n  }\n\n  function onSelect(w) {\n    setWallets(merge(wallets, { selected: w }));\n    onClose();\n  }\n\n  function onCopy(w, e) {\n    e.stopPropagation();\n    navigator.clipboard.writeText(w.address);\n  }\n\n  function onRemove(index, e) {\n    e.stopPropagation();\n    setWallets(merge(wallets, {\n      watched: wallets.watched.filter((_, i) => i !== index),\n    }));\n  }\n\n  function onRemoveConnected(e) {\n    e.stopPropagation();\n    let selected = wallets.selected;\n    if (selected.address === wallets.connected.address) selected = null;\n    setWallets(merge(wallets, { connected: null, selected }));\n  }\n\n  function onWatchedSubmit(e) {\n    e.preventDefault();\n    const newWallet = {\n      type: 'watched',\n      address: newWatchedAddress,\n      network: newWatchedAddress.startsWith('thor') ? 'mainnet' : 'testnet',\n      label: newWatchedLabel,\n    };\n    setNewWatchedAddress('');\n    setNewWatchedLabel('');\n    setWallets(merge(wallets, { watched: wallets.watched.concat([newWallet]) }));\n  }\n\n  return (\n    <div className=\"modal\" onClick={onClose}>\n      <div className=\"modal-overlay\" />\n      <div className=\"modal-content\" onClick={e => e.stopPropagation()}>\n        <h1>Wallets</h1>\n\n        <div className=\"text-bold mb-2 mt-4\">Connected</div>\n\n        {wallets.connected ? (\n          <div className=\"row p-2 bg-gray-800 rounded pointer hover:opacity-75\" onClick={onSelect.bind(null, wallets.connected)}>\n            <div>{formatAddress(wallets.connected.address)} ({wallets.connected.network})</div>\n            <div className=\"flex-shrink text-right\">\n              <a className=\"ml-2\" onClick={onCopy.bind(null, wallets.connected)}>Copy</a>\n              <a className=\"ml-2\" onClick={onRemoveConnected}>Remove</a>\n            </div>\n          </div>\n        ) : (\n          <button className=\"btn w-full\" onClick={onConnectXdefi}>Connect XDEFI</button>\n        )}\n        \n        <div className=\"text-bold mb-2 mt-4\">Watched</div>\n\n        {wallets.watched.map((w, i) => (\n          <div className=\"row p-2 mb-2 bg-gray-800 rounded pointer hover:opacity-75\" key={w.address} onClick={onSelect.bind(null, w)}>\n            <div>{formatAddress(w.address)} {w.label?`(${w.label})`:''} ({w.network})</div>\n            <div className=\"flex-shrink text-right\">\n              <a className=\"ml-2\" onClick={onCopy.bind(null, w)}>Copy</a>\n              <a className=\"ml-2\" onClick={onRemove.bind(null, i)}>Remove</a>\n            </div>\n          </div>\n        ))}\n\n        <form className=\"row\" onSubmit={onWatchedSubmit}>\n          <div style={{ flex: '1' }}>\n            <label>Address</label>\n            <input type=\"text\" value={newWatchedAddress} onChange={e => setNewWatchedAddress(e.target.value)} />\n          </div>\n          <div style={{ flex: '0 0 150px' }}>\n            <label>Label (opt)</label>\n            <input type=\"text\" value={newWatchedLabel} onChange={e => setNewWatchedLabel(e.target.value)} />\n          </div>\n          <div style={{ flex: '0 0 60px' }}>\n            <label>&nbsp;</label>\n            <button type=\"submit\" className=\"btn w-full\">Add</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport {\n  merge,\n  formatAddress,\n  useGlobalState,\n  thornodeRequest,\n  midgardRequest,\n} from \"./utils\";\nimport { stableByNetwork, defaultWorksapces } from \"./constants\";\n\nimport Icon from \"./components/icon\";\nimport Node from \"./components/node\";\nimport ModalConfigureAddress from \"./components/modalConfigureAddress\";\n\nlet gotPoolsFromMidgard = false;\n\nconst nodeSiblingNameMap = {\n  left: \"right\",\n  right: \"left\",\n  top: \"bottom\",\n  bottom: \"top\",\n};\n\nfunction App() {\n  const [modal, setModal] = useState({});\n  const [{ selected: wallet }] = useGlobalState(\"wallets\", {});\n  const [pools, setPools] = useGlobalState(\"pools\", []);\n  const [stats, setStats] = useGlobalState(\"stats\", null);\n  const [wallets, setWallets] = useGlobalState(\"wallets\");\n  const [workspaces, setWorkspaces] = useState(\n    JSON.parse(localStorage.workspaces || defaultWorksapces)\n  );\n  const [selectedWorkspaceIndex, setSelectedWorkspaceIndex] = useState(0);\n  const selectedWorkspace = workspaces[selectedWorkspaceIndex];\n\n  useEffect(() => {\n    if (!localStorage.wallets || localStorage.wallets === \"undefined\") return;\n    setWallets(JSON.parse(localStorage.wallets));\n  }, []);\n  useEffect(() => {\n    const updated = JSON.stringify(wallets);\n    if (localStorage.wallets !== updated) localStorage.wallets = updated;\n  }, [wallets]);\n  useEffect(() => {\n    const refresh = () => {\n      const n = wallet?.network || \"mainnet\";\n      thornodeRequest(n, \"/thorchain/pools\").then((thornodePools) => {\n        const stablePool = thornodePools.find(\n          (p) => p.asset === stableByNetwork[n]\n        );\n        const runePrice =\n          parseInt(stablePool.balance_asset) /\n          parseInt(stablePool.balance_rune);\n        const pools = thornodePools.reduce((ps, p) => {\n          const price =\n            runePrice * (parseInt(p.balance_rune) / parseInt(p.balance_asset));\n          const depth =\n            (parseInt(p.balance_rune) / Math.pow(10, 8)) * runePrice * 2;\n          ps[p.asset] = {\n            asset: p.asset,\n            status: p.status.toLowerCase(),\n            price: price,\n            depth: depth,\n            depthAsset: parseInt(p.balance_asset),\n            depthRune: parseInt(p.balance_rune),\n            units: parseInt(p.pool_units),\n            apy: 0,\n            volume: 0,\n          };\n          return ps;\n        }, {});\n\n        if (!gotPoolsFromMidgard) {\n          setPools(Object.values(pools).sort((a, b) => a.asset > b.asset));\n        }\n\n        midgardRequest(n, \"/pools\")\n          .then((midgardPools) => {\n            gotPoolsFromMidgard = true;\n            midgardPools.forEach((p) => {\n              if (!pools[p.asset]) return;\n              const volume =\n                ((parseFloat(p.volume24h) / Math.pow(10, 8)) *\n                  parseFloat(p.assetPriceUSD)) /\n                  parseFloat(p.assetPrice) || 0;\n              pools[p.asset].apy = parseFloat(p.poolAPY);\n              pools[p.asset].volume = volume;\n            });\n            setPools(Object.values(pools).sort((a, b) => a.asset > b.asset));\n          })\n          .catch(() => {\n            setPools(Object.values(pools).sort((a, b) => a.asset > b.asset));\n          });\n      });\n      midgardRequest(n, \"/stats\").then(setStats);\n    };\n    refresh();\n    const handle = setInterval(refresh, 15000);\n    return () => clearInterval(handle);\n  }, [wallet?.network]);\n\n  function onConfigureAddress() {\n    setModal({ type: \"configureAddress\" });\n  }\n\n  function onUpdateWorkspace(update, path) {\n    if (path.length === 0) {\n      selectedWorkspace.root = update(selectedWorkspace.root);\n    } else {\n      const parent = path.slice(0, -1).reduce((parent, leaf) => {\n        return parent[leaf];\n      }, selectedWorkspace.root);\n      const tail = path[path.length - 1];\n      let node = parent ? parent[tail] : selectedWorkspace.root;\n      node = update(node);\n      if (!node) {\n        Object.assign(\n          parent,\n          merge(parent[nodeSiblingNameMap[tail]], { size: parent.size })\n        );\n      } else {\n        parent[tail] = node;\n      }\n    }\n\n    workspaces[selectedWorkspaceIndex] = merge({}, selectedWorkspace);\n    setWorkspaces(workspaces.slice());\n    // debugging\n    window.globalWorkspaces = workspaces;\n  }\n\n  return (\n    <div>\n      <header className=\"header\">\n        <a className=\"header-brand\" href=\"/\">\n          thorbelt\n        </a>\n        <div className=\"header-workspaces\">\n          <WorkspacesNav\n            workspaces={workspaces}\n            setWorkspaces={setWorkspaces}\n            selectedWorkspaceIndex={selectedWorkspaceIndex}\n            setSelectedWorkspaceIndex={setSelectedWorkspaceIndex}\n          />\n        </div>\n        <div className=\"nav nav-right\">\n          <a className=\"nav-text text-primary\" onClick={onConfigureAddress}>\n            {wallet\n              ? formatAddress(wallet.address) + \" (\" + wallet.network + \")\"\n              : \"(no wallet connected)\"}\n          </a>\n        </div>\n      </header>\n      <div className=\"workspace\">\n        <Node\n          {...selectedWorkspace.root}\n          path={[]}\n          updateWorkspace={onUpdateWorkspace}\n        />\n      </div>\n      {modal.type === \"configureAddress\" ? (\n        <ModalConfigureAddress onClose={() => setModal({})} />\n      ) : null}\n    </div>\n  );\n}\n\nfunction WorkspacesNav({\n  workspaces,\n  setWorkspaces,\n  selectedWorkspaceIndex,\n  setSelectedWorkspaceIndex,\n}) {\n  function onAdd(e) {\n    e.preventDefault();\n    setWorkspaces((workspaces) => {\n      workspaces = workspaces.concat({\n        name: \"new workspace\",\n        root: { type: \"node\", size: 100, data: { type: \"empty\" } },\n      });\n      return workspaces;\n    });\n  }\n  function onRemove(e) {\n    e.preventDefault();\n    setWorkspaces((workspaces) => {\n      workspaces.splice(selectedWorkspaceIndex, 1);\n      return workspaces.splice();\n    });\n  }\n  function onRename(e) {\n    e.preventDefault();\n    const newName = prompt(\"New Name\", workspaces[selectedWorkspaceIndex].name);\n    if (!newName) return;\n    setWorkspaces((workspaces) => {\n      const i = selectedWorkspaceIndex;\n      workspaces[i] = { ...workspaces[i], name: newName };\n      return workspaces.slice();\n    });\n  }\n  function onSave(e) {\n    e.preventDefault();\n    localStorage.workspaces = JSON.stringify(workspaces);\n  }\n\n  return (\n    <div className=\"workspaces-nav\">\n      <div className=\"workspaces-nav-current\">\n        {workspaces[selectedWorkspaceIndex].name}\n      </div>\n      <div className=\"workspaces-nav-dropdown\">\n        {workspaces.map((w, i) => (\n          <a\n            key={i}\n            onClick={() => setSelectedWorkspaceIndex(i)}\n            className={selectedWorkspaceIndex === i ? \"is-active\" : \"\"}\n          >\n            {w.name}\n          </a>\n        ))}\n        <a onClick={onAdd} title=\"add\">\n          <Icon name=\"plus\" /> add\n        </a>\n        <a onClick={onRemove} title=\"delete\">\n          <Icon name=\"trash\" /> delete\n        </a>\n        <a onClick={onRename} title=\"rename\">\n          <Icon name=\"edit\" /> rename\n        </a>\n        <a onClick={onSave} title=\"save\">\n          <Icon name=\"save\" /> save\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}